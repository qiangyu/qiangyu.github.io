{"meta":{"title":"Xiao Yu","subtitle":"","description":"这是一个躺平人的博客","author":"Xiao Yu","url":"http://zqyu.top","root":"/"},"pages":[{"title":"","date":"2022-07-10T10:47:57.649Z","updated":"2022-07-10T10:47:57.649Z","comments":true,"path":"404.html","permalink":"http://zqyu.top/404","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"Java","date":"2020-06-06T15:50:49.000Z","updated":"2020-07-08T05:00:44.000Z","comments":true,"path":"Java/index.html","permalink":"http://zqyu.top/Java/","excerpt":"","text":"Java 本系列之主要来写一些Java基础的知识 Start Learning Java Basic"},{"title":"Spring","date":"2020-06-06T15:50:49.000Z","updated":"2022-06-18T12:50:30.865Z","comments":true,"path":"Spring/index.html","permalink":"http://zqyu.top/Spring/","excerpt":"","text":"Spring 本系列之主要来写一些Spring基础的知识 Start Learning Spring Basic"},{"title":"所有分类","date":"2021-09-24T15:21:56.403Z","updated":"2020-06-06T04:40:12.000Z","comments":true,"path":"categories/index.html","permalink":"http://zqyu.top/categories/","excerpt":"","text":""},{"title":"鸣谢项目和社区贡献者","date":"2022-07-10T12:33:19.526Z","updated":"2022-07-10T10:47:57.692Z","comments":true,"path":"contributors/index.html","permalink":"http://zqyu.top/contributors/","excerpt":"Volantis 社区的发展离不开团队大佬们的无私奉献和社区小伙伴们的热情互助。每一个心怀梦想、有着独特见解的朋友都可以成为团队的一员。目前 Volantis 社区正处于建设初期，我们缺少各方面的人才，如果您使用主题至少一个月且长期活跃于社区，例如： 解答 issues &#x2F; discussions 提交有效的建议 官网文档补全&#x2F;纠错 发现并收录有意思的文章（搭建博客方面）到官网 我们非常欢迎您的加入，请在论坛发帖告诉我们。","text":"Volantis 社区的发展离不开团队大佬们的无私奉献和社区小伙伴们的热情互助。每一个心怀梦想、有着独特见解的朋友都可以成为团队的一员。目前 Volantis 社区正处于建设初期，我们缺少各方面的人才，如果您使用主题至少一个月且长期活跃于社区，例如： 解答 issues &#x2F; discussions 提交有效的建议 官网文档补全&#x2F;纠错 发现并收录有意思的文章（搭建博客方面）到官网 我们非常欢迎您的加入，请在论坛发帖告诉我们。 感谢开发者 感谢社区建设者 如何参与社区建设社区建设主要包括 Issues Discussions(论坛) 官网博客收录 官网文档维护 几个方面。 如何维护文档目前 Volantis 已是已知的 Hexo 主题中文档最全面的，但仍有部分功能缺少明确的文档、部分文档已经过时，如果您发现了遗漏或者错误之处，我们非常希望您能够帮忙完善一下。 Volantis 官网支持 CI ，您可以直接在线编辑源码： 在线编辑文档https://github.com/volantis-x/community/tree/main/source 发布与分享文章每位用户在使用或更新主题的时候都需要阅读官网的文档，收录的相关内容能帮助用户更高效地上手，同时也能够提高被收录的文章的曝光率。如果在官网能看到更多的有价值的文章，就会有更多 Volantis 用户或者非 Volantis 用户来访问。 如果您有或者发现了与 Hexo 博客搭建相关的文章，可以转载外链到 Volantis 官网，示例如下： _posts/blogs/2020-05-17-pjax.md---title: Volantis 主题部署 Pjaxdate: 2020-05-17updated: 2020-08-07categories: [开发心得]author: inksslink: https://inkss.cn/blog/76993423/description: 本篇文章记录了我对 Volantis 主题做 Pjax 兼容的种种，大抵算是种记录吧~headimg: # 可以设置文章头图backup: https://web.archive.org/web/xxxxxxxxxx # 将页面存档到互联网档案馆 archive.org 的存档链接 https://web.archive.org/save--- 如果这篇文章的作者是第一次出现在官网，还需要在 _data/author.yml 文件中添加作者信息，例如： _data/author.yml...inkss: name: 枋柚梓 avatar: https://cdn.jsdelivr.net/gh/inkss/common@1.4.2/hexo/img/static/avatar.jpg url: https://inkss.cn 注意事项文章存放在 _posts/blogs/ 目录中，且文件名格式为「年-月-日-文章话题」。鼓励原创文章，摘要部分300字符以内。如果想不出摘要可以不写，不要在摘要里重复一遍文章标题。最好选择一个文章分类，如果现有的分类中没有合适的，可以自己新增。如果有文章头图，请确保图片内最多只有一个单词或短语，图片不清晰或者与文章无关的话不建议使用。不仅限于自己的文章，可以在征得文章作者同意的情况下将其链接收录到官网。 在线编辑文档https://github.com/volantis-x/community/tree/main/source/_posts/blogs"},{"title":"我的朋友们","date":"2022-07-10T13:06:33.326Z","updated":"2020-06-06T04:40:12.000Z","comments":false,"path":"friends/index.html","permalink":"http://zqyu.top/friends/","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"常见问题与反馈渠道","date":"2023-03-23T11:05:44.053Z","updated":"2023-03-23T11:05:44.053Z","comments":true,"path":"faqs/index.html","permalink":"http://zqyu.top/faqs/","excerpt":"通常来说，一个全新的工程全部使用默认配置是正常没有故障的。如果无法使用或者效果与示例有较大区别，可以使用 Hexo 官方提供的用于单元测试的博客应用本主题查看样式是否正常，对比 _config.yml 文件排查问题。 Hexo 官方的单元测试项目： https://github.com/hexojs/hexo-theme-unit-test 向开发者反馈问题","text":"通常来说，一个全新的工程全部使用默认配置是正常没有故障的。如果无法使用或者效果与示例有较大区别，可以使用 Hexo 官方提供的用于单元测试的博客应用本主题查看样式是否正常，对比 _config.yml 文件排查问题。 Hexo 官方的单元测试项目： https://github.com/hexojs/hexo-theme-unit-test 向开发者反馈问题 如何更新主题使用主题的时候，尽量 fork 主题到自己的 GitHub，然后进行修改并使用。这样做的好处是：当主题进行重要更新的时候可以根据需要拉取合并代码，使自己 DIY 的主题能够通过更新获取 BUG 修复或者新特性。 如果不懂请自行搜索关键词：fork 更新 实用小技巧所有需要写在主题配置文件中的配置都可以写在站点配置文件的 theme_config: 中，在 Hexo 5.0 后，还可以写在 _config.volantis.yml 文件中，详见 Hexo 官方文档：覆盖主题配置https://hexo.io/zh-cn/docs/configuration#覆盖主题配置也可以直接查看本站源码中站点配置文件的写法：_config.volantis.yml 无法成功运行本地预览 可能是没有安装依赖，请按照「开始」页面中的步骤进行安装，并安装所需依赖。 如果开启了某些第三方服务，请查看文档中是否要求安装插件。 如果报错信息有 lastIndex，你可以尝试把博客根目录配置文件中找到 highlight，并将 auto_detect 设置为 false。 主题配置修改没有生效请确认文档中要求修改的是博客主目录的配置文件 blog/_config.yml 还是主题的配置文件 blog/_config.volantis.yml。 主题样式修改没有生效如果主题配置文件中开启了 cdn 服务，那么修改本地的样式是不会生效的，需要关闭 cdn 服务。 修改什么都没有生效需要 hexo clean 然后重新 hexo s 如果安装了「相关文章推荐」插件后，每次修改 md 文件后都需要重新 hexo s 关掉 CDN 之后样式错乱 请前往文档「开始」页面，检查是否安装了必要的依赖包。 搜索无法使用 请前往文档「开始」页面，检查是否安装了必要的依赖包。 检查根目录配置文件是否有 search 字段冲突。 如果以上两步都无法找到问题，请下载示例源码进行对比。 搜索结果链接不正确请检查根目录配置文件中的链接是否正确，如： blog/_config.ymlurl: https://xaoxuu.comroot: / 教程与指南 Hexo 官方文档请一定要阅读官方文档！ 可供交流的渠道解决问题 渠道 方式 用途 Issues @volantis-x&#x2F;hexo-theme-volantis 和开发者沟通的唯一渠道，用于跟进和解决问题 请不要发送邮件开源项目的开发者很反感别人不通过正确的途径如 Issues 而是通过私人邮件询问开源项目问题，所以一般不会回复此类邮件。 交流 渠道 方式 用途 论坛 @volantis-x&#x2F;discussions 慢，相对正式，方便检索，可以给其他用户参考 QQ群 1146399464 (验证码: vlts-2021) 非正式，即时通讯，易于斗图；不利于给其他用户参考 佛系互动 渠道 方式 用途 评论区 留言 可以测试、灌水、推广自己的博客。"},{"title":"如何正确地更新主题","date":"2022-07-10T13:05:33.942Z","updated":"2022-07-10T10:47:57.709Z","comments":true,"path":"how-to-update/index.html","permalink":"http://zqyu.top/how-to-update/","excerpt":"","text":"如何正确地更新主题https://github.com/volantis-x/hexo-theme-volantis/issues/459 稳定版本如果您以内容创作为主，推荐使用稳定版本：npm i hexo-theme-volantis 更新时，把 package.json 中的版本号改为 * 再执行 npm i 就可以了。 如果您需要对主题的源文件进行修改，推荐 fork引用并修改自己 fork 的那份，当主题有更新时，合并到自己的分支。 如果您不 fork 而直接修改主题源码，是没办法获得更新的！Fork 篇本文以 GitKraken 软件的使用展开，相关链接：GitKraken: Free Git GUI Client - Windows, Mac, Linux 如果您按照主题文章中的 设置子模块 已经克隆了一份主题并添加到自己的博客仓库中，那么本篇文章将极大的帮助到您，如果您还没有如此操作，不妨尝试一番。这里是本文的仓库环境：博客仓库 Hexo-Blog 、主题仓库 volantis 。 一、GitKraken 的简单操作在 GitKraken 的软件界面中，位于正中间面积最大的区域是仓库的历史提交信息，右边为选中提交记录的详情，左边则放有一些仓库相关的信息，将目光集中到左边的 SUBMODULES 选项栏，如果您已经正常的将 Fork 的主题仓库添加到博客仓库中，您便可以在这里看到。展开 SUBMODULES 选项卡，右键并选择 Open this submodlue 打开子模块： 博客仓库 打开子模块 如此进入的仓库为您的主题仓库，可以在当前页面中查看到所有提交的历史记录等等。为了避免一些拗口的称呼所带来的不良影响，这里设定如下：将 Fork 的仓库称为 主题仓库 ，将 hexo-theme-volantis 仓库称为 volantis 仓库。 主题仓库 在图中，当前 Fork 的主题仓库所处的分支为 master-theme ，图中右侧展示的是个人主题仓库的最后一次提交信息。中间区域，较上部分在写有 master 标记的为 volantis 仓库的分支（您可以通过右侧的 Logo 图片进行区别）。显而易见的，当前主题仓库已经落后 Volantis 仓库，下面我们便需要合并代码到自己的主题仓库中。如果您打开后的界面并没有看到 Volantis 的仓库信息，意味着当前没有添加 Volantis 仓库为远端，您可以按照如下操作添加： 添加 Volantis 远端仓库信息 在左侧面板的 REMOTE 选项卡处，点击加号，进入如下图所示界面，选中 volantis-x&#x2F;hexo-theme-volantis 后添加即可。 二、GitKraken 的合并操作1. Merge在 volantis 仓库的 master 分支处右键，选择 Merge volantis&#x2F;master into xxxx，进行合并操作。至于为什么不选择变基（Rebase），个人认为保留仓库的提交历史比修改历史更好。通常，合并操作会自动完成，但是如若冲突时，会收到如此提醒：Merge Failed ,There are merge conflicts that need tobe resolved. 如它所说存在需要解决的冲突，此时右侧选项卡会展示 Merge conflicted detected 窗口，已解决的和冲突文件会显示在其中。 点击待解决冲突的窗口，在这个页面中，上半部分为本地和远端的代码，下半部分为合并后的内容。您可以根据实际情况，如回忆修改历史，选择是选中左边本地，还是右边远端，抑或是两边都选择，如果对选择后的结果不满意，您还可以手动修改 Output 窗口中的内容，当一切结束后，点击 Save 结束操作。（原则上您必须选择其中的一方，而不是直接修改 Output 的内容） 有时，可能遇到远端删除了某个文件，收到如下提示：GitKraken was unable to determine whether to keep source&#x2F;css&#x2F;_plugins&#x2F;gitalkstyl, would you like to keep it? GitKraken 不会主动删除您的文件，不过一般情形下无需保留，Delete The File 即可。 最后，在解决完所有冲突文件后，回到仓库列表界面，点击 Commit and Merge 完成提交。 A. 合并操作 B. 合并冲突检测 C. 选择合适的内容 D. 提交内容 2. Rebase简言之，Rebase 将你的所有修改（提交）重新放到了公共分支的最后面，当然后果是可能会经常面临是否强制提交，而且不太适合与 Merge 操作共同使用。以下内容摘抄自：Rebase - 廖雪峰的官方网站 多人在同一个分支上协作时，很容易出现冲突。后 Push 的童鞋不得不先 Pull ，在本地合并，然后才能 Push 成功。 总之看上去很乱，有强迫症的童鞋会问：为什么 Git 的提交历史不能是一条干净的直线？其实是可以做到的！Git 有一种称为 Rebase 的操作，有人把它翻译成“变基”。 Rebase 操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。 Rebase 操作可以把本地未push的分叉提交历史整理成直线； Rebase 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。 三、冲突的产生与避免冲突一般产生于同一处被不同人修改时，Git 无法自动处理，抛出错误让用户解决。由于主题目前仍处于青少年阶段，更新迭代速度比较快，冲突现象可能会比较明显，下面提供一些思路减少这类情况。 1.首先是配置文件，根据 Hexo 的规则，所有对配置的修改都可以独立出来，无需直接修改主题仓库下的 config.yml ，这里可以参阅：创建主题配置文件。配置类文件是最不该产生冲突的地方。 2.样式文件，根据 css 的覆盖规则，使用样式覆盖比直接修改样式来的欢快，例如主题中的光标便是采用的样式覆盖的思路。 四、代码历史维护您可以对单个文件进行历史查看操作，以此来对比您所做出的个人修改，最大程度上的避免代码丢失。正所谓熟能生巧，多加操作后主题更新将不再是一件麻烦的事情，末尾愿您一路走来，最终回归创建博客的初心，完结撒花 ★,°:.☆(￣▽￣)&#x2F;$:.°★ 。 历史记录"},{"title":"所有标签","date":"2022-07-10T08:26:43.715Z","updated":"2020-06-06T04:40:12.000Z","comments":true,"path":"tags/index.html","permalink":"http://zqyu.top/tags/","excerpt":"","text":""},{"title":"Spring原理","date":"2020-07-08T03:12:37.000Z","updated":"2022-07-10T13:07:02.974Z","comments":true,"path":"Spring/basic/SpringBasic.html","permalink":"http://zqyu.top/Spring/basic/SpringBasic","excerpt":"Spring原理","text":"Spring原理 Spring原理讲解1、什么是Spring框架，Spring框架主要包含哪些模块​ Spring是一个开源框架，Spring是一个轻量级的Java 开发框架。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的full-stack(一站式) 轻量级开源框架。 2、Spring框架的优势​ 1、Spring通过DI、AOP和消除样板式代码来简化企业级Java开发 ​ 2、Spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将Spring扩展到不同的领域，如Web服务、REST、移动开发以及NoSQL ​ 3、低侵入式设计，代码的污染极低 ​ 4、独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once,Run Anywhere的承诺 ​ 5、Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦 ​ 6、Spring的AOP允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的复用 ​ 7、Spring的ORM和DAO提供了与第三方持久层框架的的良好整合，并简化了底层的数据库访问 ​ 8、Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部 3、IOC和DI是什么？​ 控制反转是就是应用本身不负责依赖对象的创建和维护,依赖对象的创建及维护是由外部容器负责的,这样控制权就有应用转移到了外部容器,控制权的转移就是控制反转。 ​ 依赖注入是指:在程序运行期间,由外部容器动态地将依赖对象注入到组件中如：一般，通过构造函数注入或者setter注入。 4、描述下Spring IOC容器的初始化过程​ Spring IOC容器的初始化简单的可以分为三个过程： ​ 第一个过程是Resource资源定位。这个Resouce指的是BeanDefinition的资源定位。这个过程就是容器找数据的过程，就像水桶装水需要先找到水一样。 ​ 第二个过程是BeanDefinition的载入过程。这个载入过程是把用户定义好的Bean表示成Ioc容器内部的数据结构，而这个容器内部的数据结构就是BeanDefition。 ​ 第三个过程是向IOC容器注册这些BeanDefinition的过程，这个过程就是将前面的BeanDefition保存到HashMap中的过程。 5、BeanFactory 和 FactoryBean的区别？ BeanFactory是个Factory，也就是IOC容器或对象工厂，在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的，提供了实例化对象和拿对象的功能。 使用场景： 从Ioc容器中获取Bean(byName or byType) 检索Ioc容器中是否包含指定的Bean 判断Bean是否为单例 FactoryBean是个Bean，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。 使用场景 ProxyFactoryBean 6、BeanFactory和ApplicationContext的异同 相同： Spring提供了两种不同的IOC 容器，一个是BeanFactory，另外一个是ApplicationContext，它们都是Java interface，ApplicationContext继承于BeanFactory(ApplicationContext继承ListableBeanFactory。 它们都可以用来配置XML属性，也支持属性的自动注入。 而ListableBeanFactory继承BeanFactory)，BeanFactory 和 ApplicationContext 都提供了一种方式，使用getBean(&quot;bean name&quot;)获取bean。 不同： 当你调用getBean()方法时，BeanFactory仅实例化bean，而ApplicationContext 在启动容器的时候实例化单例bean，不会等待调用getBean()方法时再实例化。 BeanFactory不支持国际化，即i18n，但ApplicationContext提供了对它的支持。 BeanFactory与ApplicationContext之间的另一个区别是能够将事件发布到注册为监听器的bean。 BeanFactory 的一个核心实现是XMLBeanFactory 而ApplicationContext 的一个核心实现是ClassPathXmlApplicationContext，Web容器的环境我们使用WebApplicationContext并且增加了getServletContext 方法。 如果使用自动注入并使用BeanFactory，则需要使用API注册AutoWiredBeanPostProcessor，如果使用ApplicationContext，则可以使用XML进行配置。 简而言之，BeanFactory提供基本的IOC和DI功能，而ApplicationContext提供高级功能，BeanFactory可用于测试和非生产使用，但ApplicationContext是功能更丰富的容器实现，应该优于BeanFactory 7、Spring Bean 的生命周期？ 总结： （1）实例化Bean： 对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean。 （2）设置对象属性（依赖注入）： 实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息 以及 通过BeanWrapper提供的设置属性的接口完成依赖注入。 （3）处理Aware接口： 接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean： ①如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的就是Spring配置文件中Bean的id值； ②如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。 ③如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文； （4）BeanPostProcessor： 如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。 （5）InitializingBean 与 init-method： 如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。 （6）如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术； 以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。 （7）DisposableBean： 当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法； （8）destroy-method： 最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。 8、Spring AOP的实现原理？​ Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。 ​ Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。 ​ 如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。 9、Spring 是如何管理事务的？​ Spring事务管理主要包括3个接口，Spring的事务主要是由它们(PlatformTransactionManager，TransactionDefinition，TransactionStatus)三个共同完成的。 1. PlatformTransactionManager：事务管理器--主要用于平台相关事务的管理 主要有三个方法： commit 事务提交； rollback 事务回滚； getTransaction 获取事务状态。 2. TransactionDefinition：事务定义信息--用来定义事务相关的属性，给事务管理器PlatformTransactionManager使用 这个接口有下面四个主要方法： getIsolationLevel：获取隔离级别； getPropagationBehavior：获取传播行为； getTimeout：获取超时时间； isReadOnly：是否只读（保存、更新、删除时属性变为false--可读写，查询时为true--只读） 事务管理器能够根据这个返回值进行优化，这些事务的配置信息，都可以通过配置文件进行配置。 3. TransactionStatus：事务具体运行状态--事务管理过程中，每个时间点事务的状态信息。 例如它的几个方法： hasSavepoint()：返回这个事务内部是否包含一个保存点， isCompleted()：返回该事务是否已完成，也就是说，是否已经提交或回滚 isNewTransaction()：判断当前事务是否是一个新事务 声明式事务的优缺点： 优点：不需要在业务逻辑代码中编写事务相关代码，只需要在配置文件配置或使用注解（@Transaction），这种方式没有侵入性。 缺点：声明式事务的最细粒度作用于方法上，如果像代码块也有事务需求，只能变通下，将代码块变为方法。 10、Spring 的不同事务传播行为有哪些，干什么用的？ 11、Spring 中用到了那些设计模式？ 代理模式—在AOP中被用的比较多。 单例模式—在spring配置文件中定义的bean默认为单例模式。 模板方法—用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。 工厂模式—BeanFactory用来创建对象的实例。 适配器--spring aop 装饰器--spring data hashmapper 观察者-- spring 事件驱动模型 回调--Spring Aware回调接口 12、Spring如何解决循环依赖？https://blog.csdn.net/qq_36381855/article/details/79752689 13、bean的作用域（1）singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。 （2）prototype：为每一个bean请求提供一个实例。 （3）request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。 （4）session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。 14、Spring框架中有哪些不同类型的事件（1）上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。 （2）上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始&#x2F;重新开始容器时触发该事件。 （3）上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。 （4）上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。 （5）请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。 15、Spring通知有哪些类型（1）前置通知（Before advice）：在某连接点（join point）之前执行的通知，但这个通知不能阻止连接点前的执行（除非它抛出一个异常）。 （2）返回后通知（After returning advice）：在某连接点（join point）正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。 （3）抛出异常后通知（After throwing advice）：在方法抛出异常退出时执行的通知。 （4）后通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。 （5）环绕通知（Around Advice）：包围一个连接点（join point）的通知，如方法调用。这是最强大的一种通知类型。 环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它们自己的返回值或抛出异常来结束执行。 环绕通知是最常用的一种通知类型。 16、Spring的自动装配在spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引用赋予各个对象，使用autowire来配置自动装载模式。 在Spring框架xml配置中共有5种自动装配： （1）no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。 （2）byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。 （3）byType：通过参数的数据类型进行自动装配。 （4）constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。 （5）autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。 基于注解的方式： 使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，&lt;context:annotation-config &#x2F;&gt;。在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean： 如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据； 如果查询的结果不止一个，那么@Autowired会根据名称来查找； 如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required&#x3D;false。 @Autowired可用于：构造函数、成员变量、Setter方法 注：@Autowired和@Resource之间的区别 (1) @Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。 (2) @Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。"},{"title":"所有标签","date":"2022-07-10T13:16:02.678Z","updated":"2022-07-10T10:47:57.691Z","comments":true,"path":"blog/tags/index.html","permalink":"http://zqyu.top/blog/tags/","excerpt":"","text":""},{"title":"文章分类","date":"2022-07-10T13:16:09.007Z","updated":"2022-07-10T10:47:57.690Z","comments":true,"path":"blog/categories/index.html","permalink":"http://zqyu.top/blog/categories/","excerpt":"","text":""},{"title":"开发文档","date":"2022-07-10T13:23:09.919Z","updated":"2022-07-10T10:47:57.758Z","comments":true,"path":"v5/development-api/index.html","permalink":"http://zqyu.top/v5/development-api/","excerpt":"","text":"&ensp;Volantis5 Development API for Volantis 样式文件说明/source/css/Readme.md 全局变量volantis我们提供了全局变量 volantis 和一些全局函数等主题开发调用接口。 源码参考：layout/_partial/scripts/global.ejs VolantisApp我们提供了全局变量 VolantisApp 和一些全局函数等主题开发调用接口。 源码参考：/source/js/app.js PjaxPjax 重载区域划分接口我们提供了可以实现Pjax重载区域灵活划分的开发接口。 源码参考：layout/_plugins/pjax/index.ejs &lt;pjax&gt;&lt;/pjax&gt; 标签所有被 &lt;pjax&gt;&lt;/pjax&gt; 标签包裹的所有元素将被pjax重载。 请检查并确保 pjax 标签必须存在于所有页面 否则 pjax error. &lt;pjax&gt; &lt;!--我是将被pjax重载的内容 begin--&gt; &lt;div&gt; &lt;div&gt;&lt;/div&gt; &lt;script&gt;&lt;/script&gt; &lt;/div&gt; &lt;!--我是将被pjax重载的内容 end--&gt;&lt;/pjax&gt; 使用案例：/layout/_partial/scripts/index.ejs script[data-pjax]所有含有 data-pjax 标记的 script 标签将被pjax重载。 &lt;script data-pjax&gt;我是将被pjax重载的内容&lt;/script&gt; .pjax-reload script所有在 pjax-reload Class元素内部的 script 标签将被pjax重载。 &lt;div class=&quot;pjax-reload&quot;&gt; &lt;div&gt; &lt;div&gt;我不是将被pjax重载的内容&lt;/div&gt; &lt;script&gt;我是将被pjax重载的内容&lt;/script&gt; &lt;/div&gt;&lt;/div&gt; Pjax 回调方法我们提供了灵活的 Pjax 回调方法。 源码参考： layout/_partial/scripts/global.ejs layout/_plugins/pjax/index.ejs 使用案例：layout/_plugins/pjax/animate.ejs 中括号[]里面的内容表示选项是可选的，可以不填。下同，不再赘述。 volantis.pjax.push 在Pjax请求完成后触发。使用 volantis.pjax.push(callBack[,&quot;callBackName&quot;]) 传入pjax:complete回调函数。 callBack是回调函数,必填。 &quot;callBackName&quot; string类型 默认值是回调函数的函数名，选填。 volantis.pjax.send 在Pjax请求开始后触发。使用 volantis.pjax.send(callBack[,&quot;callBackName&quot;]) 传入pjax:send回调函数。 callBack是回调函数,必填。 &quot;callBackName&quot; string类型 默认值是回调函数的函数名，选填。 volantis.pjax.error 在Pjax请求失败后触发。使用 volantis.pjax.error(callBack[,&quot;callBackName&quot;]) 传入pjax:error回调函数。 callBack是回调函数,必填。 &quot;callBackName&quot; string类型 默认值是回调函数的函数名，选填。 暗黑模式我们提供了暗黑模式灵活的开发接口。 源码参考： layout/_partial/scripts/global.ejs layout/_plugins/darkmode/script.ejs 暗黑模式样式详见：/source/css/Readme.md 当前模式调用 volantis.dark.mode 查看当前模式。返回值为字符串 dark 或者 light。 暗黑模式触发器调用 volantis.dark.toggle() 触发切换亮黑模式。 暗黑模式触发器回调函数调用 volantis.dark.push(callBack[,&quot;callBackName&quot;]) 传入触发器回调函数. 使用案例：layout/_plugins/comments/utterances/script.ejs Message 消息提示我们在 iziToast 的基础上封装了一个简单的消息提示： 源码参考： 源码参考：/source/js/app.js VolantisApp.message(title, message, option, done);VolantisApp.question(title, message, option, success, cancel, done); title：标题（必填），字符串（String） message：内容（必填），字符串（String） option：配置项，对象(Object) done：完成时回调，函数(Function) success：确认时回调，函数(Function) cancel: 取消时回调，函数(Function) option 可选参数： icon, &#x2F;&#x2F; Fontawesome 图标 time, &#x2F;&#x2F; 持续时间 position, &#x2F;&#x2F; 弹出位置 transitionIn, &#x2F;&#x2F; 弹窗打开动画 transitionOut, &#x2F;&#x2F; 弹窗关闭动画 messageColor, &#x2F;&#x2F; 消息颜色 titleColor, &#x2F;&#x2F; 标题颜色 backgroundColor, &#x2F;&#x2F; 默认背景色 zindex &#x2F;&#x2F; 层级 option 配置优先级大于配置文件设置值。 使用范例： // 同样弹窗VolantisApp.message(&#x27;这里是标题&#x27;, &#x27;这里是弹窗内容&#x27;);// 居中弹窗VolantisApp.message(&#x27;系统提示&#x27;, &#x27;这里是 Volantis 主题站，欢迎访问。&#x27;, &#123; icon: &#x27;fad fa-smile-wink light-blue&#x27;, position: &#x27;topCenter&#x27;, transitionIn:&#x27;bounceInDown&#x27;, transitionOut: &#x27;fadeOutDown&#x27;, time: 10000&#125;);// 询问弹窗VolantisApp.question(&#x27;问卷调查&#x27;, &#x27;你是否喜欢 Volantis 主题&#x27;, &#123;&#125;, () =&gt; &#123; alert(&#x27;谢谢支持&#x27;)&#125;, () =&gt; &#123; console.log(&#x27;再接再厉&#x27;)&#125;); 如果以上两个接口仍然不能满足您的需求，可以参考 iziToast 的内容直接调用 iziToast 动态加载脚本源码参考： layout/_partial/scripts/global.ejs volantis.js(&quot;src&quot;, cb)volantis.css(&quot;src&quot;) src String类型 加载脚本URL cb 可选 可以传入onload回调函数 或者 JSON对象 例如: volantis.js(&quot;src&quot;, ()=&gt;&#123;&#125;) 或 volantis.js(&quot;src&quot;, &#123;defer:true,onload:()=&gt;&#123;&#125;&#125;) 返回 Promise 对象 如下方法同步加载资源，这利于处理文件资源之间的依赖关系，例如：APlayer 需要在 MetingJS 之前加载 (async () =&gt; &#123; await volantis.js(&quot;...theme.plugins.aplayer.js.aplayer...&quot;) await volantis.js(&quot;...theme.plugins.aplayer.js.meting...&quot;)&#125;)(); 使用案例：layout/_plugins/aplayer/script.ejs 由于返回的是 Promise 对象，也可以采用以下方式实现加载完成后调用回调函数： volantis.js(&quot;https://cdn.jsdelivr.net/npm/jquery&quot;).then(()=&gt;&#123; console.log(&quot;我在脚本加载完成后调用&quot;)&#125;) 按需加载的插件源码参考： layout/_partial/scripts/global.ejs jQueryvolantis.import.jQuery().then(()=&gt;&#123; // 依赖 jQuery 的代码段 // ..... // .....&#125;) requestAnimationFrame1、requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。 2、在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然就意味着更少的的 cpu，gpu 和内存使用量。 volantis.requestAnimationFrame(() =&gt; &#123; // 包含 DOM 操作的代码段 // ......... // .........&#125;) Layout Helper向目标元素动态注入 HTML volantis.layoutHelper(helper, html, opt) helper：Helper id（必填），字符串（String） html：HTML（必填），字符串（String） opt：配置项，对象(Object) opt 可选参数： clean, &#x2F;&#x2F; 清除 Layout Helper 原有的所有内容, 默认 false pjax, &#x2F;&#x2F; 支持 pjax, 默认 true helper 可选参数： page-plugins, &#x2F;&#x2F; 页面插件 Layout, 位于 layout&#x2F;_partial&#x2F;article.ejs comments, &#x2F;&#x2F; 评论 Layout, 位于 layout&#x2F;_plugins&#x2F;comments&#x2F;index.ejs // 向 page-plugins 入口动态注入 id 为 artitalk_main 的 div, 不启用 pjax, 不清除 Layout Helper 原有的内容volantis.layoutHelper(&quot;page-plugins&quot;,`&lt;div id=&quot;artitalk_main&quot;&gt;&lt;/div&gt;`, &#123; pjax:false, clean:false &#125;) 滚动事件处理源码参考：layout/_partial/scripts/global.ejs 获取滚动条距离顶部的距离volantis.scroll.getScrollTop() 获取滚动方向volantis.scroll.del volantis.scroll.del 中存储了一个数值, 该数值检测一定时间间隔内滚动条滚动的位移, 数值的检测频率是浏览器的刷新频率. 数值为正数时, 表示向下滚动. 数值为负数时, 表示向上滚动. 滚动事件回调函数使用 volantis.scroll.push(callBack[,&quot;callBackName&quot;]) 传入滚动事件回调函数, 当页面滚动时触发回调函数。 volantis.scroll.push(()=&gt;&#123; if (volantis.scroll.del &gt; 0) &#123; console.log(&quot;向下滚动&quot;); &#125; else &#123; console.log(&quot;向上滚动&quot;); &#125;&#125;) 使用 volantis.scroll.unengine.push(callBack[,&quot;callBackName&quot;]) 传入非滚动事件回调函数, 当页面没有滚动时触发回调函数。 使用 volantis.scroll.unengine.remove(&quot;callBackName&quot;) 移除名称为 &quot;callBackName&quot; 的非滚动事件回调函数。 触发页面滚动至目标元素位置// 滚动到目标 Dom 元素 &quot;ele&quot; 位置volantis.scroll.to(ele, option) ele：Dom 元素（必填） option 可选参数： top, &#x2F;&#x2F; 类型 Float,文档中的纵轴坐标, 默认值 ele.getBoundingClientRect().top + document.documentElement.scrollTop addTop, &#x2F;&#x2F; 类型 Float,向上面的 top 参数中 添加补偿值. behavior, &#x2F;&#x2F; 类型 String, 表示滚动行为, 支持参数 smooth (平滑滚动), instant (瞬间滚动) observer, &#x2F;&#x2F; 类型 Boolean, 是否启用监视器,默认值 false, 监视器用于监视元素是否滚动到指定位置 目前用于处理 toc 部分 lazyload 引起的 cls 导致的定位失败问题. observerDic, &#x2F;&#x2F; 类型 Float, 监视器监视距离, 默认值 25. 例如: volantis.scroll.to(document.getElementById(&quot;locationID&quot;),&#123;addTop: - volantis.dom.header.offsetHeight - 10, behavior: &#x27;instant&#x27;&#125;) 对本地文件使用CDN源码参考： layout/_partial/scripts/_ctrl/cdnCtrl.ejs theme.cdn.addJS(&quot;name&quot;,&quot;source&quot;,&quot;force&quot;)theme.cdn.addCSS(&quot;name&quot;,&quot;source&quot;,&quot;force&quot;) 参数都为 String 类型，其中 source 和 force 是可选的。 返回值为 CDN 处理后的链接，并存入theme.cdn.map.js和theme.cdn.map.css中 可以使用theme.cdn.map.js[&quot;name&quot;]再次调用。 &quot;name&quot; 是自定义名称 &quot;source&quot; 是资源路径 &quot;force&quot; 是强制覆盖的资源路径 如果&quot;source&quot;为空，则将&quot;name&quot;赋值给&quot;source&quot;。 例如： 对于文件source/js/plugins/sites.js使用CND链接，使用如下方法生成。 theme.cdn.addJS(&quot;sites&quot;,&quot;plugins/sites&quot;) 生成的CDN链接可使用 theme.cdn.map.js.sites 回调。 以下用于配置项 cdn.set 覆盖配置,下面是覆盖配置的方法 cdn: enable: true # 以下配置可以覆盖 cdn.prefix,配置项的值可以为空，但是要使用CDN必须依据路径填写配置项的键 set: js: app: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/js/app.js rightMenu: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/js/rightMenu.js parallax: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/js/parallax.js plugins: contributors: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/js/plugins/contributors.js friends: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/js/plugins/friends.js sites: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/js/plugins/sites.js css: style: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/css/style.css message: https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page/css/message.css 直接使用cdn配置项，不使用theme.cdn.addJS(&quot;sites&quot;,&quot;plugins/sites&quot;) 也可以生成 theme.cdn.map.js.sites CDN链接回调 Custom Files 自定义文件在不修改主题原始源代码的情况下添加自定义内容 注入点我们提供了一些注入点接口: let points=&#123; styles:[ &quot;first&quot;, &quot;style&quot;, &quot;dark&quot;, &quot;darkVar&quot;, ], views:[ &quot;headBegin&quot;, &quot;headEnd&quot;, &quot;header&quot;, &quot;side&quot;, &quot;topMeta&quot;, &quot;bottomMeta&quot;, &quot;footer&quot;, &quot;postEnd&quot;, &quot;bodyBegin&quot;, &quot;bodyEnd&quot;, ]&#125; 样式注入点 first: 向 theme/source/css/first.styl 文件末尾注入自定义内容, 该文件中包含首屏样式,首屏样式采用硬编码的方式写在HTML中。首屏样式内含 cover navbar search 的样式. style: 向 theme/source/css/style.styl 文件末尾注入自定义内容, 该文件中包含异步延迟加载的样式,除首屏样式,其他样式放入此处异步加载. dark: 向 theme/source/css/_style/_plugins/_dark/dark_plugins.styl 文件末尾注入自定义内容, 该文件中包含异步暗黑模式样式 的 强制覆盖样式. darkVar: 向 theme/source/css/_style/_plugins/_dark/dark_async.styl 调用函数 async_dark() 末尾注入自定义内容, 该文件中包含异步暗黑模式样式 的 暗黑模式 CSS 变量. 布局视图注入点 headBegin: 向 theme/layout/_partial/head.ejs 文件 &lt;head&gt; 标签开头注入自定义内容. headEnd: 向 theme/layout/_partial/head.ejs 文件 &lt;head&gt; 标签末尾注入自定义内容. header: 向 theme/layout/_partial/header.ejs 文件 导航栏 .nav-main 末尾注入自定义内容. side: 向 theme/layout/_partial/side.ejs 文件 侧边栏 #l_side 末尾注入自定义内容. topMeta: 向 theme/layout/_partial/meta.ejs 文件 topMetas 末尾注入自定义内容. bottomMeta: 向 theme/layout/_partial/meta.ejs 文件 bottomMetas 末尾注入自定义内容. footer: 向 theme/layout/_partial/footer.ejs 文件 &lt;footer&gt; 标签末尾注入自定义内容. postEnd: 向 theme/layout/_partial/article.ejs 文件 &lt;article&gt; 标签末尾注入自定义内容. bodyBegin: 向 theme/layout/layout.ejs 文件 &lt;body&gt; 标签开头注入自定义内容. bodyEnd: 向 theme/layout/layout.ejs 文件 &lt;body&gt; 标签末尾注入自定义内容. blog&#x2F;source&#x2F;_volantis&#x2F; 文件夹一般的, 创建 blog/source/_volantis/ 文件夹并在此文件夹下创建与注入点同名同扩展名的文件,用以写入注入点自定义内容. blog/source/_volantis/ ├─ first.styl ├─ style.styl ├─ dark.styl ├─ darkVar.styl ├─ headBegin.ejs ├─ headEnd.ejs ├─ header.ejs ├─ topMeta.ejs ├─ bottomMeta.ejs ├─ postEnd.ejs ├─ bodyBegin.ejs └─ bodyEnd.ejs 当然,你仍然可以修改主题配置文件将自定义布局或样式放置在特定位置.以下是默认配置,该配置已隐藏. blog/_config.volantis.ymlcustom_files: first: source/_volantis/first.styl style: source/_volantis/style.styl dark: source/_volantis/dark.styl darkVar: source/_volantis/darkVar.styl headBegin: source/_volantis/headBegin.ejs headEnd: source/_volantis/headEnd.ejs header: source/_volantis/header.ejs topMeta: source/_volantis/topMeta.ejs bottomMeta: source/_volantis/bottomMeta.ejs postEnd: source/_volantis/postEnd.ejs bodyBegin: source/_volantis/bodyBegin.ejs bodyEnd: source/_volantis/bodyEnd.ejs 示例: blog/source/_volantis/darkVar.stylbody --color-site-body: blue !important theme_inject 过滤器使用 Hexo 过滤器 theme_inject ，可以将所需的自定义内容添加到任何注入点。 如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 scripts 文件夹，在启动时就会自动载入。您可以直接在 blog 文件夹下创建 scripts 文件夹. hexo.extend.filter.register(&#x27;theme_inject&#x27;, function(injects) &#123; // ...&#125;); 对于注入布局视图: // The name of same `injectPoint` suggest be unique. If same, it will override low priority configurations.// `locals` and `options` is the same as partial https://hexo.io/docs/helpers#partial.// `order` defines the order of injection, which by default depends on the priority of injection.hexo.extend.filter.register(&#x27;theme_inject&#x27;, function(injects) &#123; // it will put code from this filePath into injectPoint. injects.[injectPoint].file(name, filePath, [locals, options, order]); // it will put raw string as code into injectPoint. injects.[injectPoint].raw(name, raw, [locals, options, order]);&#125;); 对于注入样式: hexo.extend.filter.register(&#x27;theme_inject&#x27;, function(injects) &#123; // it will put styleFile into injectPoint. injects.[injectPoint].push(styleFile);&#125;); Examples以文件的形式向 theme/css/style.styl 文件末尾注入自定义样式 blog/scripts/example-1.jshexo.extend.filter.register(&#x27;theme_inject&#x27;, function(injects) &#123; injects.style.push(&#x27;source/_data/mystyle.styl&#x27;);&#125;); 以文本的形式向 &lt;body&gt; 标签末尾注入自定义脚本内容 blog/scripts/example-2.jshexo.extend.filter.register(&#x27;theme_inject&#x27;, function(injects) &#123; injects.bodyEnd.raw(&#x27;load-custom-js&#x27;, &#x27;&lt;script src=&quot;js-path-or-cdn.js&quot;&gt;&lt;/script&gt;&#x27;);&#125;); 以文件的形式向侧栏注入自定义布局视图内容 blog/scripts/example-3.jshexo.extend.filter.register(&#x27;theme_inject&#x27;, function(injects) &#123; injects.side.file(&#x27;my-favourite-food&#x27;, &#x27;source/_data/my-favourite-food.ejs&#x27;);&#125;); 插件系统我们还支持 hexo 的插件系统，无需修改核心模块的源代码即可轻松扩展功能。你可以参考 https://hexo.io/docs/plugins.html#Plugin 学习如何创建插件。 请注意，以上是主题开发文档，不是使用文档！"},{"title":"进阶设定","date":"2023-03-23T14:24:55.098Z","updated":"2022-07-10T10:47:57.757Z","comments":true,"path":"v5/advanced-settings/index.html","permalink":"http://zqyu.top/v5/advanced-settings/","excerpt":"","text":"设置子模块 将主题添加为子模块 开始前需要确认不存在 themes&#x2F;volantis 文件夹, 如果有, 请自行删除.sshhttpsgit submodule add git@github.com:volantis-x/hexo-theme-volantis.git themes/volantisgit submodule add https://github.com/volantis-x/hexo-theme-volantis.git themes/volantis 多人协同默认的作者信息在主题配置文件中设置： blog/themes/volantis/_config.yml# 文章布局article: ... body: ... meta_library: author: avatar: name: 请设置文章作者 url: / Volantis 支持多个作者在一个站点发布文章，其他作者信息需要写在数据文件中，例如： blog/source/_data/author.ymlJon: name: Jon Snow avatar: https://cn.bing.com/th?id=AMMS_fc8f99fd41ebd737a71c4e13806db9a0&amp;w=110&amp;h=110&amp;c=7&amp;rs=1&amp;qlt=80&amp;pcl=f9f9f9&amp;cdv=1&amp;dpr=2&amp;pid=16.1 url: https://gameofthrones.fandom.com/wiki/Jon_SnowDany: name: Daenerys Targaryen avatar: https://tse1-mm.cn.bing.net/th?id=OIP.Yax4wLzIFbcBVUa_RsKywQHaLH&amp;w=80&amp;h=80&amp;c=8&amp;rs=1&amp;qlt=90&amp;dpr=2&amp;pid=3.1&amp;rm=2 url: https://gameofthrones.fandom.com/wiki/Daenerys_Targaryen 在文章的 front-matter 中新增 author 即可： ---title: Jon Snow | Game of Thrones Wiki | Fandomauthor: Jon--- 内容安全策略(CSP)blog/_config.volantis.yml# 内容安全策略( CSP ) meta 标签 http-equiv=&quot;Content-Security-Policy&quot;# https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP# https://content-security-policy.com/# 也可以设为 false 在 HTTP 标头中设置 https://volantis.js.org/v5/advanced-settings/#设置-HTTP-响应标头csp: enable: true content: &quot; default-src &#x27;self&#x27; https:; block-all-mixed-content; base-uri &#x27;self&#x27; https:; form-action &#x27;self&#x27; https:; worker-src &#x27;self&#x27; https:; connect-src &#x27;self&#x27; https: *; img-src &#x27;self&#x27; data: https: *; media-src &#x27;self&#x27; https: *; font-src &#x27;self&#x27; data: https: *; frame-src &#x27;self&#x27; https: *; manifest-src &#x27;self&#x27; https: *; child-src https:; script-src &#x27;self&#x27; https: &#x27;unsafe-inline&#x27; *; style-src &#x27;self&#x27; https: &#x27;unsafe-inline&#x27; *; &quot; # 可以使用自动程序替换默认的 &#x27;unsafe-inline&#x27; 和 * 生成更严格的内容安全策略. # 另可以参考官网的 gulp 方案. # gulpfile.js https://github.com/volantis-x/community/blob/main/gulpfile.js 设置 HTTP 响应标头以 Cloudflare 为例， 在 规则 &gt; 转换规则 &gt; HTTP 响应头修改 中，可以添加以下设置： 内容安全策略( CSP ) Content-Security-Policy: default-src &#x27;self&#x27; https:; block-all-mixed-content; base-uri &#x27;self&#x27; https:; form-action &#x27;self&#x27; https:; worker-src &#x27;self&#x27; https:; connect-src &#x27;self&#x27; https: *; img-src &#x27;self&#x27; data: https: *; media-src &#x27;self&#x27; https: *; font-src &#x27;self&#x27; data: https: *; frame-src &#x27;self&#x27; https: *; manifest-src &#x27;self&#x27; https: *; child-src https:; script-src &#x27;self&#x27; https: &#x27;unsafe-inline&#x27; *; style-src &#x27;self&#x27; https: &#x27;unsafe-inline&#x27; *; Doc for Content-Security-Policy 不允许在 frame 中展示 x-frame-options: DENY Doc for X-Frame-Options HTTP&#x2F;2 Server Push link: &lt;/css/style.0eb76567.css&gt;; rel=preload; as=style,&lt;/js/app.c1d0c869.js&gt;; rel=preload; as=script, &lt;https://static.mycdn.com&gt;; rel=dns-prefetch, &lt;https://static.mycdn.com&gt;; rel=preconnect; crossorigin Doc for Link 为网站提速加载速度 减少不必要的 js 插件，例如字数统计、动态背景。 查找并解决拖慢速度的资源，以 Chrome 浏览器为例： 页面中点击右键，选择「检查」。 在右边的窗口中「Network」选项卡，并勾选「Disable cache」。 刷新网页，查看加载速度慢的资源。 3.1. 加载缓慢的图片，建议使用 CDN。 3.2. 加载缓慢的可以不用的 js 插件，建议舍弃。 3.3. 加载缓慢却必须使用的 js 插件，建议下载并自己上传至 jsdelivr。 运行速度 访问具有动态特效背景（如雪花、粒子等）的网站时，手机很快会发烫变卡，笔记本很快会风扇狂转并且浏览器提示建议关闭此页面。如果你希望网站有好的使用体验请尽量不要安装这类插件。 优化 SEORobotsblog/_config.volantis.ymlseo: # When there are no keywords in the article&#x27;s front-matter, use tags as keywords. use_tags_as_keywords: true # When there is no description in the article&#x27;s front-matter, use excerpt as the description. use_excerpt_as_description: true robots: home_first_page: index,follow home_other_pages: noindex,follow archive: noindex,follow category: noindex,follow tag: noindex,follow # robots can be written in front-matter 在 front-matter 中，可以设置 keywords、description、robots 和 seo_title。其中 seo_title 仅仅用作网页标题，优先级高于 title。 文章内部不要使用 H1 标题。 通过死链检测工具检查并删除无法访问的链接。 安装 SEO 优化插件： hexo-autonofollowhttps://github.com/liuzc/hexo-autonofollow hexo-generator-seo-friendly-sitemaphttps://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap 页面不要堆砌关键词，不要频繁更改路径。 Open Graphblog/_config.volantis.yml# https://ogp.me/# https://hexo.io/zh-cn/docs/helpers#open-graphopen_graph: image: https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/favicon/android-chrome-192x192.png twitter_card: summary # summary_large_image , summary #twitter_id: #twitter_site: Structured Datablog/_config.volantis.yml# SEO 入门文档: https://developers.google.com/search/docs# https://schema.org.cn/# 结构化数据用于更改搜索结果的显示效果# 目前内置的结构化数据: blogposting, breadcrumblist, organization, person, website# 目前内置的富媒体搜索结果: 路径(面包屑导航), 徽标(Logo), 站点链接搜索框(SearchAction)# https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data# 富媒体搜索结果测试: https://search.google.com/test/rich-resultsstructured_data: enable: true # 以下是覆盖配置, 默认配置见 scripts/helpers/structured-data/lib/config.js data: person: sns: - https://github.com/volantis-x logo: path: https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/favicon/android-chrome-192x192.png width: 192 height: 192 使用 CDN对于大部分将博客 deploy 到 GitHub 的用户来说，直接加载本地资源速度比较慢，可以使用 jsdelivr 为开源项目提供的 CDN 服务。 开启方法blog/_config.volantis.yml# 本地静态文件使用 CDN 加速# 默认使用 https://unpkg.com/hexo-theme-volantis@&lt;%- theme.info.theme_version %&gt;/source/js/*.js ，注意版本号对应关系！！可以通过修改以下配置项覆盖# 开发者注意 cdn.enable 设置为 falsecdn: enable: true # CDN 前缀，为空使用默认值，链接最后不加 &quot;/&quot;, # 例如： https://cdn.jsdelivr.net/gh/volantis-x/volantis-x.github.io@gh-page 填写最后编译生成的源码CDN地址前缀，此路径下应该含有/js与/css目录, # 该配置默认值是：&quot;https://unpkg.com/hexo-theme-volantis@&quot;+ theme.info.theme_version +&quot;/source&quot; prefix: #https://npm.elemecdn.com/hexo-theme-volantis/source # 以下配置可以覆盖 cdn.prefix,配置项的值可以为空，但是要使用CDN必须依据路径填写配置项的键 set: js: app: /js/app.js css: style: /css/style.css # (异步加载样式)# 静态资源版本控制# 本地文件使用文件内容的hash值作为版本号(app.8c1e7c88.js) 其他为时间戳 (?time=1648684470140)# 建议静态资源设置标头浏览器缓存一年边缘缓存一个月 cache-control: max-age=86400, s-maxage=31536000 如果有更新记得刷新缓存cdn_version: true# volantis static 静态资源文件 npm 包 CDN 地址 (后面加 &quot;/&quot; )# https://github.com/volantis-x/volantis-staticvolantis_static_cdn: https://unpkg.com/volantis-static/ 如果你需要对样式进行 DIY，可以只关闭 style 文件的 CDN。 从V5版本开始，首屏样式采用硬编码的方式写在HTML中。首屏样式内含 cover navbar search 的样式，其他样式放入&#x2F;css&#x2F;style.css异步加载。 如果你需要对样式进行 DIY，请注意首屏渲染和异步延迟加载的差异。 可以对 style.css 使用 HTTP&#x2F;2 Server Push，但是此方案并不推荐。我们已经对style.css进行了preload处理，推荐使用对服务器压力成本较小的 CDN 服务。 自定义 CDN如果你把对应的文件上传到自己的 CDN 服务器，可以把对应的链接改为自己的 CDN 链接。 尝试使用 Terser 压缩 ES6安装压缩工具npm install -g gulpnpm install --save-dev gulp gulp-html-minifier-terser gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-terser gulp-sourcemaps gulp 配置文件 gulp 配置文件 https://github.com/volantis-x/community/blob/main/gulpfile.jsblog/gulpfile.jsvar gulp = require(&#x27;gulp&#x27;);const cleanCSS = require(&#x27;gulp-clean-css&#x27;);var htmlmin = require(&#x27;gulp-html-minifier-terser&#x27;);var htmlclean = require(&#x27;gulp-htmlclean&#x27;);var terser = require(&#x27;gulp-terser&#x27;);var sourcemaps = require(&#x27;gulp-sourcemaps&#x27;);// 压缩css文件const minify_css = () =&gt; ( gulp.src([&#x27;./public/**/*.css&#x27;,&#x27;!./public/&#123;lib,lib/**&#125;&#x27;,&#x27;!./public/&#123;libs,libs/**&#125;&#x27;,&#x27;!./public/&#123;media,media/**&#125;&#x27;]) .pipe(sourcemaps.init()) .pipe(cleanCSS(&#123;compatibility: &#x27;ie8&#x27;&#125;)) .pipe(sourcemaps.write(&#x27;./maps&#x27;)) .pipe(gulp.dest(&#x27;./public&#x27;)));// 压缩html文件const minify_html = () =&gt; ( gulp.src([&#x27;./public/**/*.html&#x27;,&#x27;!./public/&#123;lib,lib/**&#125;&#x27;,&#x27;!./public/&#123;libs,libs/**&#125;&#x27;,&#x27;!./public/&#123;media,media/**&#125;&#x27;]) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&#x27;./public&#x27;)))// 压缩js文件const minify_js = () =&gt; ( gulp.src([&#x27;./public/**/*.js&#x27;, &#x27;!./public/**/*.min.js&#x27;,&#x27;!./public/&#123;lib,lib/**&#125;&#x27;,&#x27;!./public/&#123;libs,libs/**&#125;&#x27;,&#x27;!./public/&#123;media,media/**&#125;&#x27;]) .pipe(sourcemaps.init()) .pipe(terser()) .pipe(sourcemaps.write(&#x27;./maps&#x27;)) .pipe(gulp.dest(&#x27;./public&#x27;)))gulp.task(&#x27;one&#x27;, gulp.parallel( minify_html, minify_css, minify_js))gulp.task(&#x27;default&#x27;, gulp.series(&#x27;one&#x27;)); 运行压缩gulp 安装 Service Worker 服务方案一 安装插件安装 hexo-offline-popup 或者 hexo-offline 插件，初次加载速度不变，后期切换页面和刷新网页速度越来越快。 方案二 使用 workbox 自定义配置 step 1. 修改 blog/_config.yml 文件。 blog/_config.yml# 全局导入import: body_end: - &lt;script&gt;&quot;serviceWorker&quot;in navigator&amp;&amp;navigator.serviceWorker.register(&quot;/sw.js&quot;).then(function(n)&#123;n.onupdatefound=function()&#123;var e=n.installing;e.onstatechange=function()&#123;switch(e.state)&#123;case&quot;installed&quot;:navigator.serviceWorker.controller?console.log(&quot;Updated serviceWorker.&quot;):console.log(&quot;serviceWorker Sucess!&quot;);break;case&quot;redundant&quot;:console.log(&quot;The installing service worker became redundant.&quot;)&#125;&#125;&#125;&#125;).catch(function(e)&#123;console.log(&quot;Error during service worker registration:&quot;,e)&#125;); &lt;/script&gt; step 2. 在 blog/source 中创建 sw.js 文件。 blog/source/sw.jsimportScripts(&#x27;https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/workbox-sw.js&#x27;);workbox.setConfig(&#123; modulePathPrefix: &#x27;https://cdn.jsdelivr.net/npm/workbox-cdn@5.1.3/workbox/&#x27;&#125;);const &#123; core, precaching, routing, strategies, expiration, cacheableResponse, backgroundSync &#125; = workbox;const &#123; CacheFirst, NetworkFirst, NetworkOnly, StaleWhileRevalidate &#125; = strategies;const &#123; ExpirationPlugin &#125; = expiration;const &#123; CacheableResponsePlugin &#125; = cacheableResponse;const cacheSuffixVersion = &#x27;-000010&#x27;, // 缓存版本号 极端重要，修改静态文件后发布网页一定要修改缓存版本号 maxEntries = 100;self.addEventListener(&#x27;activate&#x27;, (event) =&gt; &#123; event.waitUntil( caches.keys().then((keys) =&gt; &#123; return Promise.all(keys.map((key) =&gt; &#123; if (!key.includes(cacheSuffixVersion)) return caches.delete(key); &#125;)); &#125;) );&#125;);core.setCacheNameDetails(&#123; prefix: &#x27;volantis&#x27;, // 极端重要 自己拟定一个名字 suffix: cacheSuffixVersion&#125;);core.skipWaiting();core.clientsClaim();precaching.cleanupOutdatedCaches();/* * Precache * - Static Assets */precaching.precacheAndRoute( // 极端重要 定义首次缓存的静态文件 如果开启CDN需要修改为CDN链接 [ &#123; url: &#x27;/css/first.css&#x27;, revision: null &#125;, &#123; url: &#x27;/css/style.css&#x27;, revision: null &#125;, &#123; url: &#x27;/js/app.js&#x27;, revision: null &#125;, ],);/* * Cache File From CDN * * Method: CacheFirst * cacheName: static-immutable * cacheTime: 30d */// cdn.jsdelivr.net - cors enabledrouting.registerRoute( /.*cdn\\.jsdelivr\\.net/, new CacheFirst(&#123; cacheName: &#x27;static-immutable&#x27; + cacheSuffixVersion, fetchOptions: &#123; mode: &#x27;cors&#x27;, credentials: &#x27;omit&#x27; &#125;, plugins: [ new ExpirationPlugin(&#123; maxAgeSeconds: 30 * 24 * 60 * 60, purgeOnQuotaError: true &#125;) ] &#125;));// m7.music.126.net - cors enabledrouting.registerRoute( /.*m7\\.music\\.126\\.net/, new CacheFirst(&#123; cacheName: &#x27;static-immutable&#x27; + cacheSuffixVersion, fetchOptions: &#123; mode: &#x27;cors&#x27;, credentials: &#x27;omit&#x27; &#125;, plugins: [ new ExpirationPlugin(&#123; maxAgeSeconds: 30 * 24 * 60 * 60, purgeOnQuotaError: true &#125;) ] &#125;));/* * No Cache * * Method: networkOnly */routing.registerRoute( /.*baidu\\.com.*/, new NetworkOnly());/* * Others img fonts * Method: staleWhileRevalidate */routing.registerRoute( // Cache image fonts files /.*\\.(?:png|jpg|jpeg|svg|gif|webp|ico|eot|ttf|woff|woff2|mp3)/, new StaleWhileRevalidate());/* * Static Assets * Method: staleWhileRevalidate */routing.registerRoute( // Cache CSS files /.*\\.(css|js)/, // Use cache but update in the background ASAP new StaleWhileRevalidate());/* * sw.js - Revalidate every time * staleWhileRevalidate */routing.registerRoute( &#x27;/sw.js&#x27;, // 本文件名 new StaleWhileRevalidate());/* * Default - Serve as it is * networkFirst */routing.setDefaultHandler( new NetworkFirst(&#123; networkTimeoutSeconds: 3 &#125;)); 如果你使用了此方案，修改静态文件后发布网页一定要修改缓存版本号。 安装「相关文章」插件 安装插件 npm i -S hexo-related-popular-posts 插件的自定义配置方法： hexo-related-popular-postshttps://github.com/tea3/hexo-related-popular-posts 如果您使用了头图，可以在站点配置文件中添加以下设置来让相关文章显示正确的文章头图： blog/_config.ymlpopularPosts: eyeCatchImageAttributeName: headimg 注意需要升级到 5.0.1 及以上版本才可以支持自定义头图，详见 #29 分析与统计数据统计PV 和 UV默认支持 不蒜子 的访问统计和 leancloud 统计，在配置文件中设置。 若你选择 leancloud 统计, 你还需前往 leancloud 创建应用并填写下面 leancloud 相关配置 若你选择 不蒜子 统计, 请取消下面 busuanzi 的配置注释 blog/_config.volantis.ymlanalytics: busuanzi: #/libs/busuanzi/js/busuanzi.pure.mini.js #https://cdn.jsdelivr.net/gh/volantis-x/cdn-busuanzi@2.3/js/busuanzi.pure.mini.js leancloud: # 请使用自己的 id &amp; key 以防止数据丢失 app_id: # 应用 APP_ID app_key: # 应用 APP_KEY custom_api_server: # 国际版一般不需要写，除非自定义了 API Server 字数和阅读时长 安装以下插件：npm i --save hexo-wordcount 修改配置文件，将 wordcount 插件打开blog/_config.volantis.ymlplugins: ... # 文章字数统计、阅读时长，开启需要安装插件: npm i --save hexo-wordcount wordcount: enable: #true 然后修改配置文件，将 wordcount 写入需要显示的 meta 位置：blog/_config.volantis.yml# 文章布局article: ... # 文章详情页面的文章卡片本体布局方案 body: # 文章顶部信息 # 从 meta_library 中取 top_meta: [..., wordcount, ...] ... # 文章底部信息 # 从 meta_library 中取 bottom_meta: [..., wordcount, ...] 数据分析百度统计blog/_config.ymlbaidu_analytics_key: 百度统计的key Google Analyticsblog/_config.ymlgoogle_analytics_key: Google Analytics Key 腾讯前端性能监控blog/_config.ymltencent_aegis_id: 上报 id CNZZ 统计请参考 ZYMIN 的这篇教程： Hexo hexo+ejs+material x 添加CNZZ统计代码https://zymin.cn/arcticle/hexo+ejs+material.html 更多进阶玩法详见 @TRHX 的这篇博客： Hexo 博客主题个性化https://www.itbob.cn/article/003/ 内含卡片半透明、增加卡通人物、自定义鼠标样式、鼠标特效、烟花特效、彩色滚动字体、网站运行时间、动态浏览器标题、雪花飘落特效等多种详细教程。 主题官网 #进阶玩法https://volantis.js.org/categories/进阶玩法/"},{"title":"","date":"2022-07-10T13:23:09.921Z","updated":"2022-07-10T10:47:57.762Z","comments":true,"path":"v5/getting-started/index.html","permalink":"http://zqyu.top/v5/getting-started/","excerpt":"","text":"&ensp;Volantis5 A Wonderful Theme for Hexo Volantis 是一个功能丰富、高度模块化的 Hexo 博客主题。得益于其强大的模块化特性，您可以轻松搭建一个极简风格的博客，也可以仿照官网搭建一个多人协作的、包含文档模块的大体量综合型博客。 示例博客/examples/ 所有的 Volantis 用户都可以按照格式自行创建 Issue 来将自己的博客添加到官网的示例博客页面中。 准备工作能力条件环境配置条件自建博客需要一定的相关知识，在开始前，请务必确保您会使用 markdown 语法，掌握简单的 git 知识，最最重要的是，遇到困难知道该怎么寻求解决： 翻阅和搜索文档 搜索 issues 中是否有解决办法 新建 issue 并按照要求进行操作，详尽地描述您遇到的问题 如果您没有使用过 Hexo 也不要着急，可以先通读一遍 Hexo 中文文档，要想使用地得心应手，最好参照团队提供的开源项目的源码进行搭建： Demo 源码 ｜ 官网源码如果您从旧版本更新或着其它主题迁移，请确保环境版本不要太低，否则会产生兼容性问题。 Hexo: 5.4 ~ 6.xhexo-cli: 4.3 ~ latestnode.js: 16.x LTS ~ latest LTSnpm: 8.x ~ latest LTS 快速体验如果您已经具备环境配置条件，可以在终端中输入下面这行代码，稍等片刻即可尝鲜体验： git clone https://github.com/volantis-x/demo.git &amp;&amp; cd demo &amp;&amp; npm i &amp;&amp; hexo s 下载与安装volantis 5.x 目前正处于 「stable 阶段」 volantis 4.x 目前正处于 「EOL(End of Life) 阶段」 volantis 开发发布周期依次经过: 「alpha 阶段」&#x3D;&gt;「beta 阶段」&#x3D;&gt;「rc 阶段」&#x3D;&gt;「stable 阶段」&#x3D;&gt;「EOL 阶段」 rc 阶段的测试版本和 stable 阶段的正式版本 我们统称为 「稳定版本」 , 只有 「稳定版本」 发布到 npm alpha 阶段的开发测试版本 和 beta 阶段的测试版本 我们统称为 「小白鼠测试版本」, 「小白鼠测试版本」 仅存在于 Github 仓库的 dev 分支 安装或更新 「稳定版本」 (rc 阶段的测试版本 或 stable 阶段的正式版本) 全新博客安装从其它主题迁移第 1&#x2F;2 步：修改站点配置文件在 blog/_config.yml 文件中找到并修改：theme: volantis第 2&#x2F;2 步：下载主题在终端中输入：npm i hexo-theme-volantis 如果您是 Mac 用户，可以使用脚本完成全部流程 在博客路径打开终端，下载安装并应用主题：curl -s https://volantis.js.org/start | bash这行命令将会自动检测并安装所需环境，初始化博客，然后下载安装并应用主题。脚本详细使用方法：#hexo.sh 第 1&#x2F;3 步：修改站点配置文件在 blog/_config.yml 文件中找到并修改：theme: volantis第 2&#x2F;3 步：下载主题如果您已经升级到 Hexo 5.0.2 及以上，可以直接使用 npm 命令安装：npm i hexo-theme-volantis对于旧版本，需要下载主题源码到 themes/ 文件夹：git clone https://github.com/volantis-x/hexo-theme-volantis themes/volantis如果您无法访问 GitHub 可以使用国内镜像源：git clone https://e.coding.net/volantis-x/p/hexo-theme-volantis.git themes/volantis第 3&#x2F;3 步：检查并安装依赖安装 Hexo 搜索的依赖包：npm i hexo-generator-json-content安装 Stylus 渲染器：npm i hexo-renderer-stylus 安装或更新 「小白鼠测试版本」 (alpha 阶段的开发测试版本 或 beta 阶段的测试版本) 第 1&#x2F;3 步：修改站点配置文件在 blog/_config.yml 文件中找到并修改：theme: volantis第 2&#x2F;3 步：将主题仓库添加为子模块 将主题添加为子模块 开始前需要确认不存在 themes&#x2F;volantis 文件夹, 如果有, 请自行删除.sshhttpsgit submodule add git@github.com:volantis-x/hexo-theme-volantis.git themes/volantisgit submodule add https://github.com/volantis-x/hexo-theme-volantis.git themes/volantis 第 3&#x2F;3 步：将主题仓库切换为 dev 分支在终端中输入：cd themes/volantisgit checkout dev第 n&#x2F;n 步：更新主题在终端中输入：git pull 版本更新注意事项使用主题的时候，尽量 fork 主题到自己的 GitHub，然后进行修改并使用。这样做的好处是：当主题进行重要更新的时候可以根据需要拉取合并代码，使自己 DIY 的主题能够通过更新获取 BUG 修复或者新特性。 如果不懂请自行搜索关键词：fork 更新 实用小技巧所有需要写在主题配置文件中的配置都可以写在站点配置文件的 theme_config: 中，在 Hexo 5.0 后，还可以写在 _config.volantis.yml 文件中，详见 Hexo 官方文档：覆盖主题配置https://hexo.io/zh-cn/docs/configuration#覆盖主题配置也可以直接查看本站源码中站点配置文件的写法：_config.volantis.yml 请对照 更新日志 进行更新. 如何正确地更新主题/how-to-update/ 许可协议本主题采用 MIT开源许可协议 ，永久无限制免费使用。 MIT开源许可协议被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软件及软件的副本。被授权人可根据程式的需要修改授权条款为适当的内容。在软件和软件的所有副本中都必须包含版权声明和许可声明。 配置与使用配置与使用/v5/site-settings/"},{"title":"站点配置","date":"2022-07-10T13:23:09.922Z","updated":"2022-07-10T10:47:57.765Z","comments":true,"path":"v5/site-settings/index.html","permalink":"http://zqyu.top/v5/site-settings/","excerpt":"","text":"博客根目录下的 _config.yml 文件通常负责站点相关配置、第三方 npm 插件相关的配置。 网站标题blog/_config.yml# 网站标题title: my blog 网站图标简单方式完全自定义blog/_config.yml# 网站图标，更多尺寸等图标请使用import方式批量导入favicon: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/favicon/favicon.icoblog/_config.ymlimport: head_begin: - &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#ffffff&quot;&gt; - &lt;meta name=&quot;msapplication-config&quot; content=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/browserconfig.xml&quot;&gt; - &lt;meta name=&quot;theme-color&quot; content=&quot;#ffffff&quot;&gt; - &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/apple-touch-icon.png&quot;&gt; - &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon-32x32.png&quot;&gt; - &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon-16x16.png&quot;&gt; - &lt;link rel=&quot;manifest&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/site.webmanifest&quot;&gt; - &lt;link rel=&quot;mask-icon&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/safari-pinned-tab.svg&quot; color=&quot;#5bbad5&quot;&gt; - &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon.ico&quot;&gt; - &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;Volantis&quot;&gt; - &lt;meta name=&quot;application-name&quot; content=&quot;Volantis&quot;&gt; - &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#f4f4f4&quot;&gt; - &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon-32x32.png&quot;&gt; - &#x27;&lt;meta name=&quot;theme-color&quot; content=&quot;#f4f4f4&quot; media=&quot;(prefers-color-scheme: light)&quot;&gt;&#x27; - &#x27;&lt;meta name=&quot;theme-color&quot; content=&quot;#121212&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;&#x27; head_end: body_begin: body_end: 多语言设置blog/_config.ymllanguage: - zh-CN - en - zh-HK - zh-TW 对应的翻译文件路径： themes/volantis/languages/ 使用 Import 导入外部文件Volantis 用户可以在不修改主题文件的情况下向 head 和 body 中添加各种标签。 代码片段注入的位置： head_begin: 注入在 &lt;head&gt; 之后 head_end: 注入在 &lt;/head&gt; 之前 body_begin: 注入在 &lt;body&gt; 之后 body_end: 注入在 &lt;/body&gt; 之前 blog/_config.ymlimport: head_begin: - &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#ffffff&quot;&gt; - &lt;meta name=&quot;msapplication-config&quot; content=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/browserconfig.xml&quot;&gt; - &lt;meta name=&quot;theme-color&quot; content=&quot;#ffffff&quot;&gt; - &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/apple-touch-icon.png&quot;&gt; - &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon-32x32.png&quot;&gt; - &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon-16x16.png&quot;&gt; - &lt;link rel=&quot;manifest&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/site.webmanifest&quot;&gt; - &lt;link rel=&quot;mask-icon&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/safari-pinned-tab.svg&quot; color=&quot;#5bbad5&quot;&gt; - &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon.ico&quot;&gt; - &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;Volantis&quot;&gt; - &lt;meta name=&quot;application-name&quot; content=&quot;Volantis&quot;&gt; - &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#f4f4f4&quot;&gt; - &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;https://unpkg.com/volantis-static@0.0.1649552113628/media/org.volantis/blog/favicon/favicon-32x32.png&quot;&gt; - &#x27;&lt;meta name=&quot;theme-color&quot; content=&quot;#f4f4f4&quot; media=&quot;(prefers-color-scheme: light)&quot;&gt;&#x27; - &#x27;&lt;meta name=&quot;theme-color&quot; content=&quot;#121212&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;&#x27; head_end: - &lt;meta name=&quot;hello&quot; content=&quot;world&quot;&gt; body_begin: - &lt;script&gt;&lt;/script&gt; body_end: - &lt;script&gt;&lt;/script&gt; 更多Hexo 官方文档 #配置https://hexo.io/zh-cn/docs/configuration"},{"title":"FAQ","date":"2023-03-23T11:02:00.533Z","updated":"2022-07-10T10:47:57.761Z","comments":true,"path":"v5/faq/index.html","permalink":"http://zqyu.top/v5/faq/","excerpt":"","text":"&ensp;Volantis5 FAQ List For Volantis 5 这是什么？我在哪里？我也不知道 我这里出现了故障，需要先做什么？ Troubleshooting any problem without the error log is like driving with your eyes closed. 在没有错误日志的情况下诊断任何问题无异于闭眼开车 我应该使用哪个版本？使用最新的版本 如何在魔改主题的情况下还能兼顾更新？使用 Custom Files 自定义文件 和 Development API for Volantis. 使用 Hexo Theme Plus 替换掉在 layout 文件夹下的主题文件. 使用 Hexo 插件系统 在 blog 目录根下创建 scripts 文件夹编写脚本. 如何更新主题？RTFM 如何修改 favicon？RTFM 文档为什么和配置文件不一样？以配置文件为准，文档更新的不是非常及时 如何设置主页的背景图？主题有俩种背景图片设置方式 background 仅能设置一张背景图，且背景图范围仅为 cover 区域 parallax 可以设置一张或更多的背景图，当 position 取值为 cover 时，背景图仅为 cover 区域，具有视差滚动效果。position 取值为 fixed 时，背景图固定在整个页面，不具有视差滚动效果。 原 parallax 和 backstretch 已合并为 parallax注意：背景图配置只能生效一个 volantis-x&#x2F;community&#x2F;issues&#x2F;115#issuecomment-907983622 到哪里查找 fontawesome 图标？ https://fontawesome.com/icons 为什么无法正常显示 aplayer？可能是网易云 API 崩溃了 图片怎么添加灯箱放大效果？使用 gallery 标签 控制台有一个奇怪的 Warning？(node:7973) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:7973) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:7973) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency(node:7973) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(node:7973) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:7973) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency 我想把它命名为 Warning-738. volantis-x&#x2F;hexo-theme-volantis&#x2F;discussions&#x2F;738 5.0 的友情链接页有啥变化？volantis-x&#x2F;hexo-theme-volantis&#x2F;discussions&#x2F;734 如何正确渲染多行 MathJax 公式？使用 pandoc 正确渲染多行 MathJax 公式 或者直接放图片... 为什么文章会被截断？ What is the answer to Life, the Universe, and Everything?42 上面没有我要找的答案？尝试 打开搜索 或 常见问题与反馈渠道"},{"title":"页面配置","date":"2022-07-10T13:23:09.921Z","updated":"2022-07-10T10:47:57.764Z","comments":true,"path":"v5/page-settings/index.html","permalink":"http://zqyu.top/v5/page-settings/","excerpt":"","text":"页面布局模板布局模板 取值 含义 page 独立页面 post 文章页面 docs 文档页面 category 分类页面 tag 标签页面 friends 友链页面 list 列表页面 page &amp; post &amp; docs这三种页面相同，但是有以下细微区别： post 文章有 title 时，向下滚动网页，导航栏会向上移出屏幕显出文章标题，而 page 和 docs 不会。 post 文章末尾最多可以显示「参考资料」、「相关文章」、「版权标识」、「打赏」四个模块。 docs 文章末尾最多可以显示「参考资料」一个模块。 除了归档页面是自动生成的，其它独立页面都需要手动创建 md 文件。 归档页面归档页面是自动生成的，并且初始化的时候已经生成，路径如下： blog/_config.yml# Directoryarchive_dir: archives 关于页面Create file if not exists: source/about/index.md---layout: docsseo_title: 关于bottom_meta: falsesidebar: []twikoo: placeholder: 有什么想对我说的呢？---下面写关于自己的内容 分类页面Create file if not exists: source/categories/index.md---layout: categoryindex: truetitle: 所有分类--- 标签页面Create file if not exists: source/tags/index.md---layout: tagindex: truetitle: 所有标签--- 列表页面Create file if not exists: source/mylist/index.md---layout: listgroup: mylistindex: true--- 结果就是筛选出所有文章中 front-matter 部分含有 group: mylist 的文章。 友链页面创建页面文件Create file if not exists: source/friends/index.md---layout: friends # 必须title: 我的朋友们 # 可选，这是友链页的标题---这里写友链上方的内容。&lt;!-- more --&gt;这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。 插入友链数据可以 选择布局方案 或 使用友链标签 选择布局方案在主题配置文件中找到以下内容： pages: # 友链页面配置 friends: layout_scheme: traditional # simple: 简单布局, traditional: 传统布局 目前提供2种布局方案： simple: 简单布局，只有头像和标题。 traditional: 传统布局，是 Volantis 旧版本的风格。 以上2种友链的数据源写在以下路径，如果没有请自行创建： blog/source/_data/friends.yml 内容格式为： blog/source/_data/friends.yml- group: # 分组标题 description: # 分组描述 items: - title: # 名称 avatar: # 头像 url: # 链接 screenshot: # 截图 keywords: # 关键词 description: # 描述 - title: # 名称 avatar: # 头像 url: # 链接 screenshot: # 截图 keywords: # 关键词 description: # 描述 不同的布局方式，会用到一部分的字段，一般来说，title、avatar 和 url 都是必须的。这些数据被转成 HTML 标签插入到友链页面的 &lt;!-- more --&gt; 部分。 Volantis 4.x 新增的网站卡片标签的样式 sites 网站卡片布局 在5.0版本移除 被 sites标签 friends标签 contributors标签 替代 issues 标签在5.0版本移除 被 sites标签 friends标签 contributors标签 替代 使用友链标签使用 友链标签 您可以在任何位置插入友链，支持静态数据和动态数据, 关于如何使用 友链标签 插入友链，详见： volantis 主题文档 #友链标签/v5/tag-plugins/#友链标签 404页面Create file if not exists: source/404.md---cover: truerobots: noindex,nofollowsitemap: falseseo_title: 404 Not Foundbottom_meta: falsesidebar: []twikoo: path: /404.html placeholder: 请留言告诉我您要访问哪个页面找不到了---&#123;% p logo center huge, 404 %&#125;&#123;% p center bold, 很抱歉，您访问的页面不存在 %&#125;&#123;% p center small, 可能是输入地址有误或该地址已被删除 %&#125; front-matterfront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量。更多请见 Hexo 官方文档：#front-matter 字段 含义 值类型 默认值 layout 布局模版 String - title 页面标题 String - seo_title 网页标题 String page.title short_title 页面标题（在group列表中显示） String page.title date 创建时间 Date 文件创建时间 updated 更新日期 Date 文件修改时间 link 外部文章网址 String - music 内部音乐控件 [Object] - robots robots String - keywords 页面关键词 String - description 页面描述、摘要 String - cover 是否显示封面 Bool true top_meta 是否显示文章或页面顶部的meta信息 Bool true bottom_meta 是否显示文章或页面底部的meta信息 Bool true sidebar 页面侧边栏 Bool, Array theme.layout.*.sidebar body 页面主体元素 Array theme.layout.on_page.body thumbnail 缩略图 String false icons 图标 Array [] pin 是否置顶 Bool false headimg 文章头图 url - layout:post 时特有的字段： 字段 含义 值类型 默认值 author 文章作者 [Object] config.author categories 分类 String, Array - tags 标签 String, Array - toc 是否生成目录 Bool true music 字段 是否必须 值类型 server 是 netease, tencent, kugou, xiami, baidu type 是 song, playlist, album, search, artist id 是 song id &#x2F; playlist id &#x2F; album id &#x2F; search keyword 文章置顶在 front-matter 中设置以下值： front-matterpin: true 文章分类多个分类有两种关系，一种是层级（等同于文件夹），一种是并列（等同于标签）。 多级分类： front-matter---categories: [分类A, 分类B]--- 或者 front-matter---categories: - 分类A - 分类B--- 并列分类 front-mattercategories: - [分类A] - [分类B] 多级+并列分类 front-mattercategories: - [分类A, 分类B] - [分类C, 分类D] 文章摘要在文章中插入 &lt;!-- more --&gt;，前面的部分即为摘要。 某篇文章源码---title: xxxdate: 2020-02-21---这是摘要&lt;!-- more --&gt;这是正文 注意： &lt;!-- more --&gt; 前后一定要有空行，不然可能导致显示错位。 设置文章作者Volantis 支持多个作者在一个站点发布文章，其他作者信息需要写在数据文件中，例如： blog/source/_data/author.ymlJon: name: Jon Snow avatar: https://cn.bing.com/th?id=AMMS_fc8f99fd41ebd737a71c4e13806db9a0&amp;w=110&amp;h=110&amp;c=7&amp;rs=1&amp;qlt=80&amp;pcl=f9f9f9&amp;cdv=1&amp;dpr=2&amp;pid=16.1 url: https://gameofthrones.fandom.com/wiki/Jon_SnowDany: name: Daenerys Targaryen avatar: https://tse1-mm.cn.bing.net/th?id=OIP.Yax4wLzIFbcBVUa_RsKywQHaLH&amp;w=80&amp;h=80&amp;c=8&amp;rs=1&amp;qlt=90&amp;dpr=2&amp;pid=3.1&amp;rm=2 url: https://gameofthrones.fandom.com/wiki/Daenerys_Targaryen 在文章的 front-matter 中新增 author 即可： front-matter---title: Jon Snow | Game of Thrones Wiki | Fandomauthor: Jon--- 引入外部文章利用 link，搭配自定义的文章作者信息，你可以在文章列表中显示外部文章或者网址，例如： blog/source/_data/author.ymlxaoxuu: name: xaoxuu avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png url: https://xaoxuu.com front-matter---layout: postdate: 2017-07-05title: [转]如何搭建基于Hexo的独立博客categories: [Dev, Hexo]tags: - Hexoauthor: xaoxuulink: https://xaoxuu.com/blog/2017-07-05-hexo-blog/---![](https://img.vim-cn.com/d9/a9af7dc49fc0af8ca3e6dd2450a2f7095a87db.png) 置顶对于任何文章或者页面，设置 pin: true 即可置顶在首页。 front-matter---pin: true--- 这会导致一个小问题：首页 post 卡片数量多于设定值，如果有强迫症希望每一个分页数量一致，可以安装插件来实现，详见：#421 不归档存放在 _posts 文件夹下的文章一般都会出现在归档页，如果某篇文章不希望出现在归档页面： front-matter---archive: false--- 页面自定义布局显示迷你音乐播放器标题右边显示迷你音乐播放器，支持的字段有：server、type、id。 front-matter---music: server: netease # netease, tencent, kugou, xiami, baidu type: song # song, playlist, album, search, artist id: 16846091 # song id / playlist id / album id / search keyword--- 实际效果见： #contributors 显示 meta 标签文章顶部和底部的日期、分类、更新日期、标签、分享等属于 meta 标签。 front-matter---top_meta: falsebottom_meta: false--- 如果一个页面没有 title 则不会显示 top_meta ，像404、关于页面就可以完全隐藏： front-matter---seo_title: 关于top_meta: falsebottom_meta: false--- 标题右边显示缩略图front-matter---thumbnail: https://img.vim-cn.com/17/0c7b02722686d1527a1df807dae0794d995860.png--- 缩略图仅在文章列表和文章页面显示，不会在归档页面显示。 标题右边显示图标front-matter---icons: [fas fa-fire red, fas fa-star green]--- 图标仅在归档页面中显示，可以用来标注热门文章。 可以通过 red &#x2F; blue &#x2F; green &#x2F; yellow &#x2F; orange &#x2F; theme &#x2F; accent 来设置图标的颜色 是否要显示封面如果某个页面需要封面，可以这样写： front-matter---cover: true--- 显示侧边栏通过自由设置边栏卡片来删减对应页面的冗余信息，提高有价值的信息在页面中的权重。 如果某个页面不需要侧边栏，可以这样写： front-matter---sidebar: []--- 某个页面想指定显示某几个侧边栏，就这样写: front-matter---sidebar: [grid, toc, tags] # 放置任何你想要显示的侧边栏部件--- 关闭评论front-matter---comments: false--- 页面插件 (page plugins)在 front-matter 中配置页面插件 front-matter---plugins: - mathjax - katex - artitalk - bbtalk - fcircle - gitter - indent - snackbar: oldversion--- 说说页面以 Artitalk页面 为例: 创建页面文件Create file if not exists: source/artitalk/index.md---seo_title: 说说comments: falseplugins: - artitalk # - bbtalk # - fcircle--- 配置Artitalk在主题配置文件中找到以下内容 # Artitalk https://artitalk.js.org# 配置过程请参考：https://artitalk.js.org/doc.html# 使用过旧版本的请修改Leancloud shuoshuo class部分列名：https://artitalk.js.org/release.html# 除appID和appKEY外均为选填项artitalk: # Set `plugins: [&quot;artitalk&quot;]` to enable in front-matter # 不支持 Pjax # 配置项按照yml格式继续填写即可 appId: # your appID appKey: # your appKEY # serverURL: #leancloud绑定的api访问域名，使用国际版的话不需要填写 # lang: # 语言设置，zh为汉语，en为英语，es为西班牙语。默认为汉语 # pageSize: #每页说说的显示数量 # shuoPla: #在编辑说说的输入框中的占位符 # avatarPla: #自定义头像url的输入框的占位符 # motion: #加载动画的开关，1为开，0为关，默认为开 # bgImg: #说说输入框背景图片url # color1: #说说背景颜色1&amp;按钮颜色1 # color2: #说说背景颜色2&amp;按钮颜色2 # color3: #说说字体颜色 # cssUrl: #自定义css接口 渲染公式默认是不渲染的，如果文章内有公式，需要在 front-matter 中设置开启。即便开启了，文章列表中也不会进行渲染，请注意不要把公式写在文章开头。 example.md:---title: 渲染公式（MathJax）date: 2020-02-23plugins: - mathjax---添加一段描述性文字&lt;!-- more --&gt;$$t+1=2$$$$\\mbox&#123;积累因子&#125;=\\begin&#123;cases&#125;1+ni &amp; \\mbox&#123;单利&#125;\\\\\\\\(1+i)^n &amp; \\mbox&#123;复利&#125;\\end&#123;cases&#125;$$$$\\begin&#123;equation&#125;\\sum_&#123;i=0&#125;^n F_i \\cdot \\phi (H, p_i) - \\sum_&#123;i=1&#125;^n a_i \\cdot ( \\tilde&#123;x_i&#125;, \\tilde&#123;y_i&#125;) + b_i \\cdot ( \\tilde&#123;x_i&#125;^2 , \\tilde&#123;y_i&#125;^2 )\\end&#123;equation&#125;$$$$\\begin&#123;equation&#125;\\beta^*(D) = \\mathop&#123;argmin&#125; \\limits_&#123;\\beta&#125; \\lambda &#123;||\\beta||&#125;^2 + \\sum_&#123;i=1&#125;^n max(0, 1 - y_i f_&#123;\\beta&#125;(x_i))\\end&#123;equation&#125;$$ 查看公式渲染效果 $$t+1&#x3D;2$$$$\\mbox{积累因子}&#x3D;\\begin{cases}1+ni &amp; \\mbox{单利}\\\\(1+i)^n &amp; \\mbox{复利}\\end{cases}$$$$\\begin{equation}\\sum_{i&#x3D;0}^n F_i \\cdot \\phi (H, p_i) - \\sum_{i&#x3D;1}^n a_i \\cdot ( \\tilde{x_i}, \\tilde{y_i}) + b_i \\cdot ( \\tilde{x_i}^2 , \\tilde{y_i}^2 )\\end{equation}$$$$\\begin{equation}\\beta^*(D) &#x3D; \\mathop{argmin} \\limits_{\\beta} \\lambda {||\\beta||}^2 + \\sum_{i&#x3D;1}^n max(0, 1 - y_i f_{\\beta}(x_i))\\end{equation}$$ 如果公式仍无法正确渲染可以阅读 @MicDZ 的这篇文章： 在Material-X上使用KaTeXhttps://www.micdz.cn/article/katex-on-volantis/ 页面 gitter页面配置 front-matter---plugins: - gitter--- 配置 gitter在主题配置文件中找到以下内容 plugins: .... # Gitter # https://gitter.im gitter: room: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 文章页首行缩进front-matter---plugins: - indent--- Snackbar (页面通知)配置数据源数据源写在以下路径，如果没有请自行创建： blog/source/_data/notification.yml 内容格式为： blog/source/_data/notification.ymloldversion: title: 过期的文档 message: 这份文档过于久远，如果您使用的是新版的主题，请查看新版本的文档。 position: bottom # bottom (底部通知), right (右侧通知，会自动消失) theme: warning # default, warning cache: false # 是否记住选项（下次不再弹出） buttons: - title: 查看新版文档 url: /getting-started/ dismiss: false # 点击了是否关闭底部横幅 配置 front-matterfront-matter---plugins: - snackbar: oldversion---"},{"title":"主题配置","date":"2022-07-10T13:55:28.663Z","updated":"2022-07-10T13:55:28.663Z","comments":true,"path":"v5/theme-settings/index.html","permalink":"http://zqyu.top/v5/theme-settings/","excerpt":"","text":"创建主题配置文件主题目录下的 _config.yml 文件通常负责主题相关配置，我们强烈建议您使用代替的主题配置文件以防止自己的配置丢失。那么如何使用代替主题配置文件呢？ 第 1&#x2F;2 步：创建配置文件 在博客根目录的 _config.yml 文件旁边新建一个文件： _config.volantis.yml ，这个文件中的配置信息优先级高于主题文件夹中的配置文件。 第 2&#x2F;2 步：覆盖自定义配置 当您需要修改某项内容时，例如导航栏菜单，那么您需要在主题配置文件中找到相关内容，复制进自己创建的配置文件中：blog/_config.volantis.ymlnavbar: visiable: auto # always, auto logo: # choose [img] or [icon + title] img: volantis-static/media/org.volantis/blog/Logo-NavBar@3x.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png icon: title: menu: - name: 博客 icon: fa-solid fa-rss url: /小提示使用「npm i hexo-theme-volantis」方式安装的主题，主题配置文件在「blog/node_modules/hexo-theme-volantis/_config.yml」使用传统方式安装的主题，主题配置文件在「blog/themes/volantis/_config.yml」 自定义主题外观最大布局宽度blog/_config.volantis.ymlcustom_css: ... max_width: 1080px # Sum of body width and sidebar width 网页所呈现的内容的最大宽度，即 body 和 sidebar 的宽度之和。 抗锯齿blog/_config.volantis.ymlcustom_css: ... font_smoothing: true # font-smoothing for webkit 自定义光标样式blog/_config.volantis.ymlcustom_css: ... cursor: enable: true text: volantis-static/media/cursor/text.png # https://cdn.jsdelivr.net/gh/inkss/common@1/cursor/text.png pointer: volantis-static/media/cursor/pointer.png # https://cdn.jsdelivr.net/gh/inkss/common@1/cursor/pointer.png default: volantis-static/media/cursor/left_ptr.png # https://cdn.jsdelivr.net/gh/inkss/common@1/cursor/left_ptr.png not-allowed: volantis-static/media/cursor/circle.png # https://cdn.jsdelivr.net/gh/inkss/common@1/cursor/circle.png zoom-out: volantis-static/media/cursor/zoom-out.png # https://cdn.jsdelivr.net/gh/inkss/common@1/cursor/zoom-out.png zoom-in: volantis-static/media/cursor/zoom-in.png # https://cdn.jsdelivr.net/gh/inkss/common@1/cursor/zoom-in.png grab: volantis-static/media/cursor/openhand.png # https://cdn.jsdelivr.net/gh/inkss/common@1/cursor/openhand.png 导航栏样式您可以设置导航栏的高度以及视觉特效，视觉特效目前可选的有： shadow：卡片阴影。 floatable：当鼠标移动到容器内时，呈现出浮起来的效果。 blur：背景模糊效果（毛玻璃），当浏览器不支持时显示为不透明。 blog/_config.volantis.ymlcustom_css: ... navbar: height: 64px width: auto # auto, max effect: [shadow, blur] # [shadow, floatable, blur] 滚动条样式blog/_config.volantis.ymlcustom_css: ... scrollbar: size: 4px border: 2px color: &#x27;#2196f3&#x27; hover: &#x27;#ff5722&#x27; 侧边栏样式视觉特效参数同上，值得注意的是：卡片的 floatable 效果和 blur 效果相冲突。 blog/_config.volantis.ymlcustom_css: ... sidebar: effect: [shadow] # [shadow, floatable, blur] 正文区域样式视觉特效参数同上，值得注意的是：卡片的 floatable 效果和 blur 效果相冲突。您可以在 language: true 这里设置代码块显示语言名称。text_align 可以设置 h1&#x2F;h2&#x2F;h3&#x2F;h4&#x2F;p 的文字对齐方向。 blog/_config.volantis.ymlcustom_css: ... body: effect: [shadow] # [shadow, floatable, blur] highlight: language: true # show language of codeblock copy_btn: true text_align: # left, right, justify, center h1: left h2: left h3: left h4: left p: justify 布局间距您可以设置几种标题的布局间距 h2&#x2F;h3&#x2F;h4、段落间距 line、区块内部的段落间距 inline。 blog/_config.volantis.ymlcustom_css: ... gap: h2: 48px # Spacing above H2 (only px unit) h3: 24px # Spacing above H3 (only px unit) h4: 16px # Spacing above H4 (only px unit) p: 1em # Paragraph spacing between paragraphs line_height: 1.6 # normal, 1.5, 1.75, 2 ... 自定义字体您可以自定义正文和代码字体。 blog/_config.volantis.ymlcustom_css: ... fontfamily: logofont: fontfamily: &#x27;&quot;Varela Round&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, Helvetica, Arial&#x27; name: &#x27;Varela Round&#x27; url: volantis-static/media/fonts/VarelaRound/VarelaRound-Regular.ttf # https://cdn.jsdelivr.net/gh/volantis-x/cdn-fonts/VarelaRound/VarelaRound-Regular.ttf weight: normal style: normal bodyfont: fontfamily: &#x27;UbuntuMono, &quot;Varela Round&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, Helvetica, Arial&#x27; name: &#x27;UbuntuMono&#x27; url: volantis-static/media/fonts/UbuntuMono/UbuntuMono-Regular.ttf # https://cdn.jsdelivr.net/gh/volantis-x/cdn-fonts/UbuntuMono/UbuntuMono-Regular.ttf weight: normal style: normal codefont: fontfamily: &#x27;Menlo, UbuntuMono, Monaco&#x27; # name: &#x27;Monaco&#x27; # url: volantis-static/media/fonts/Monaco/Monaco.ttf # https://cdn.jsdelivr.net/gh/volantis-x/cdn-fonts/Monaco/Monaco.ttf # weight: normal # style: normal 自定义颜色多彩配色方案 blog/_config.volantis.ymlcolor_scheme: # ------------ # 通用颜色 common: # 主题色 theme: &#x27;#44D7B6&#x27; # 链接色 link: &#x27;#2196f3&#x27; # 按钮色 button: &#x27;#44D7B6&#x27; # 鼠标放到交互元素上时的色 hover: &#x27;#ff5722&#x27; # 主题色块内部的文字颜色 inner: &#x27;#fff&#x27; # 选中区域文字的背景颜色 selection: &#x27;alpha(#2196f3, 0.2)&#x27; # ------------ # 亮色主题（默认） light: # 网站背景色 site_bg: &#x27;#f4f4f4&#x27; # 网站背景上的文字 site_inner: &#x27;#fff&#x27; # 网站页脚文字 site_footer: &#x27;#666&#x27; # 卡片背景色 card: &#x27;#fff&#x27; # 卡片上的普通文字 text: &#x27;#444&#x27; # 区块和代码块背景色 block: &#x27;#f6f6f6&#x27; # 代码块高亮时的背景色 codeblock: &#x27;#FFF7EA&#x27; # 行内代码颜色 inlinecode: &#x27;#D56D28&#x27; # 文章部分 h1: &#x27;#444&#x27; h2: &#x27;#444&#x27; h3: &#x27;#444&#x27; h4: &#x27;#444&#x27; h5: &#x27;#444&#x27; h6: &#x27;#444&#x27; p: &#x27;#444&#x27; # 列表文字 list: &#x27;#666&#x27; # 列表 hover 时的文字 list_hl: &#x27;mix($color-theme, #000, 80)&#x27; # 辅助性文字 meta: &#x27;#888&#x27; # ------------ # 暗色主题 dark: # 网站背景色 site_bg: &#x27;#222&#x27; # 网站背景上的文字 site_inner: &#x27;#eee&#x27; # 网站页脚文字 site_footer: &#x27;#aaa&#x27; # 卡片背景色 card: &#x27;#444&#x27; # 卡片上的普通文字 text: &#x27;#eee&#x27; # 区块和代码块背景色 block: &#x27;#3a3a3a&#x27; # 代码块高亮时的背景色 codeblock: &#x27;#343a3c&#x27; # 行内代码颜色 inlinecode: &#x27;#D56D28&#x27; # 文章部分 h1: &#x27;#eee&#x27; h2: &#x27;#eee&#x27; h3: &#x27;#ddd&#x27; h4: &#x27;#ddd&#x27; h5: &#x27;#ddd&#x27; h6: &#x27;#ddd&#x27; p: &#x27;#bbb&#x27; # 列表文字 list: &#x27;#aaa&#x27; # 列表 hover 时的文字 list_hl: &#x27;mix($color-theme, #fff, 80)&#x27; # 辅助性文字 meta: &#x27;#888&#x27; # 夜间图片亮度 brightness: 70% 自定义右键菜单自定义右键菜单自 5.0.0-rc.8 版本进行了全新重构，与历史版本相比，重构版右键菜单拥有更灵活的配置。 由于新版右键菜单配置较为复杂，原版菜单暂时性保留，在配置文件上新版右键以 rightmenus 命名。 为了方面称呼，以新版右键代指重构版右键菜单，老版右键代指历史版本右键菜单。 差异对比新旧两版右键菜单的差异如下： 对比项 老版右键 新版右键 自定义菜单项 只支持新增链接型菜单 同时支持事件型和链接型菜单 菜单项显示与顺序调整 部分支持 完全支持 内置菜单自定义调整 部分支持 完全支持修改文字描述、图标显示、功能实现等内容 自定义响应事件处理 不支持 支持自行添加 复制图片至剪切板 仅支持 PNG 格式图片 任意格式的图片 全局音乐控制 支持 支持 新版右键菜单新版右键在菜单项上根据配置文件自行生成前端代码，所以统一了一个共用的菜单对象： &#123;id: &#x27;&#x27;, name: &#x27;&#x27;, icon: &#x27;&#x27;, link: &#x27;&#x27;, event: &#x27;&#x27;, group: &#x27;&#x27;&#125; 同时为了响应不同状态下的右键行为，提出了内置组 （defaultGroup）的概念，相应的对于右键默认提供的功能实现则定义为内置实现（defaultEvent）。 &#123; defaultEvent: [&#x27;copyText&#x27;, &#x27;copyLink&#x27;, &#x27;copyPaste&#x27;, &#x27;copyAll&#x27;, &#x27;copyCut&#x27;, &#x27;copyImg&#x27;, &#x27;printMode&#x27;, &#x27;readMode&#x27;], defaultGroup: [&#x27;navigation&#x27;, &#x27;inputBox&#x27;, &#x27;seletctText&#x27;, &#x27;elementCheck&#x27;, &#x27;elementImage&#x27;, &#x27;articlePage&#x27;]&#125; 具体来说，内置组对应右键行为，例如 inputBox 代表在输入框下右键行为；内置实现对应自定义右键默认提供的功能实现，例如 readMode 代表了阅读模式。 参数解释plugins/menus 类的组内数据支持对象（单个菜单）或数组（一系列菜单）rightmenus: order: menus.groupName plugins: defaultGroupItem menus: groupName: - &#123;menu&#125; - &#123;menu&#125; groupName1: &#123;menu&#125; 右键菜单加载菜单的具体加载由 order 控制，可供使用的内容为：plugins.[组名], menus.[组名], hr, music 这四大类。 右键菜单排序菜单的排序由 order 字段的先后顺序和组内菜单项的先后顺序决定。 右键菜单类菜单项共分为两大类：plugins 和 menus，前者放置内置组及内置菜单，允许添加&#x2F;修改组内菜单；后者为用户自建菜单类，允许添加&#x2F;修改组及组内菜单。一般意义上 plugins 类的组为动态组，根据实际的右键状态进行显示；menus 类中内容由用户添加，菜单项默认显示。 右键菜单项菜单项共六个字段：id, name, icon, link, event, group，具体作用如下： id: 唯一值 name: 用于菜单名称显示 icon: 用于菜单图标显示 link: 跳转链接 event: 事件，当输入内容不为内置事件时，作 JavaScript 代码执行 group: 菜单项所处分组名称 note link&#x2F;event 二选一，同时出现时仅处理 link。 内置功能内置组 组名 描述 备注 navigation 导航组件，横向排列，共用一行，仅显示图标 原则上支持的数量不限 inputBox 文本输入框相关组件 生效于 input&#x2F;textarea seletctText 文本选中类组件 生效于右键选中文本，text 为选中的文本 elementCheck 链接判断组件 生效于链接处的右键行为，link 为链接地址 elementImage 图片判断类组件 生效于图片类的右键行为，link 为链接地址 articlePage 文章页面组件 生效于 post.article 页面 note 除 navigation 外的内置组，在显示时会隐藏含 link 属性的菜单项。 内置实现 事件名 描述 备注 copyText 复制文本 复制选中文本 copyLink 复制链接地址 复制 a 或 image 下的链接至剪切板 copyPaste 粘贴文本 需要用户批准相应权限，仅支持粘贴文本至输入框（暂不支持粘贴图片） copyAll 全选文本 选中输入框内的文本内容 copyCut 剪切文本 剪切输入框中选中的文本内容 copyImg 复制图片 支持 Chrome 浏览器，复制图片资源至剪切板 printMode 打印页面 一个调制过样式的打印功能 readMode 阅读模式 一个简单的阅读模式功能 默认设置iconPrefixFontawesome 图标前缀，音乐类组件使用，参考内容：fa-solid, fa-regular, fa-light, fa-thin, fa-duotone, fa-brands。 articleShowLink在 articlePage 组显示时（文章页）时依旧显示含 link 属性的菜单项。 musicAlwaysShow当设定全局音乐播放器时，是否一直显示音乐控制菜单。false：仅当音乐播放时启用。 corsAnywhere适用于复制图片文件的场景，当图片源未设置 Access-Control-Allow-Origin 时，图片复制由于 CORS 问题失败。 你可以自行部署相应项目解决该问题，详见：Rob--W&#x2F;cors-anywhere 或者 Zibri&#x2F;cloudflare-cors-anywhere。 回调方法volantis.rightmenu.handle 在右键菜单打开时执行。 volantis.rightmenu.handle(callBack[,&quot;callBackName&quot;, &quot;setRequestAnimationFrame &#x3D; true&quot;])。 此外，你还可以在 volantis.mouseEvent 处获得 MouseEvent 信息。 配置文件 blog/_config.volantis.yml ### 自定义右键 新rightmenus: enable: true # 右键菜单项及加载顺序 # 内容示例：plugins.[组名], menus.[组名], hr(分割线，推荐去线留白), music(音乐控制器) order: - plugins.navigation - hr - plugins.inputBox - plugins.seletctText - plugins.elementCheck - plugins.elementImage - menus.link - hr - menus.darkMode - plugins.articlePage - music ############################ # - &#123;id: &#x27;&#x27;, name: &#x27;&#x27;, icon: &#x27;&#x27;, link: &#x27;&#x27;, event: &#x27;&#x27;, group: &#x27;&#x27;&#125; # id: 唯一值 # name: 用于菜单名称显示 # icon: 用于菜单图标显示 # link: 跳转链接 # event: 事件，当输入内容不为内置事件时，作 JavaScript 代码执行 # group: 菜单项所处分组名称 # 注： # 1. link/event 二选一，同时出现时仅处理 link # 2. 内置事件列表： copyText, copyLink, copyPaste, copyAll, copyCut, copyImg, printMode, readMode # 3. 内置组列表：navigation, inputBox, seletctText, elementCheck, elementImage, articlePage # 4. plugins 列允许自定义组内项目 # 5. menus 列允许自定义组及其内容 # 6. 除 navigation 外的内置组，在显示时会隐藏含 link 属性的菜单项 ########################### # 基础项设置 options: # 图标前缀 fa-solid, fa-regular, fa-light, fa-thin, fa-duotone, fa-brands iconPrefix: fa-solid # 例外，在 articlePage 组显示时（文章页）时依旧显示含 link 属性的菜单项 articleShowLink: false # 当设定全局音乐播放器时，是否一直显示音乐控制菜单。false：仅当音乐播放时启用 musicAlwaysShow: false # 适用于复制图片文件的场景，当图片源未设置 Access-Control-Allow-Origin 时，图片复制由于 CORS 问题失败 # 你可以自行部署相应项目解决该问题，详见：https://github.com/Rob--W/cors-anywhere 或者 https://github.com/Zibri/cloudflare-cors-anywhere corsAnywhere: # 右键内置组，预置实现 plugins: # 导航组件 # 横向排列，共用一行，仅显示图标 (原则上支持的数量不限) navigation: - &#123;id: &#x27;left&#x27;, name: &#x27;转到上一页&#x27;, icon: &#x27;fa-solid fa-arrow-left&#x27;, event: &#x27;history.back()&#x27;, group: &#x27;navigation&#x27;&#125; - &#123;id: &#x27;right&#x27;, name: &#x27;转到下一页&#x27;, icon: &#x27;fa-solid fa-arrow-right&#x27;, event: &#x27;history.forward()&#x27;, group: &#x27;navigation&#x27;&#125; - &#123;id: &#x27;redo&#x27;, name: &#x27;刷新当前页面&#x27;, icon: &#x27;fa-solid fa-redo&#x27;, event: &#x27;window.location.reload()&#x27;, group: &#x27;navigation&#x27;&#125; - &#123;id: &#x27;up&#x27;, name: &#x27;回到顶部&#x27;, icon: &#x27;fa-solid fa-arrow-up&#x27;, event: &#x27;VolantisApp.scrolltoElement(volantis.dom.bodyAnchor)&#x27;, group: &#x27;navigation&#x27;&#125; #- &#123;id: &#x27;home&#x27;, name: &#x27;回到首页&#x27;, icon: &#x27;fa-solid fa-home&#x27;, link: &#x27;/&#x27;, group: &#x27;navigation&#x27;&#125; # 文本输入框相关组件 # 生效于 input/textarea，粘贴、剪切、全选 inputBox: - &#123;id: &#x27;copyPaste&#x27;, name: &#x27;粘贴文本&#x27;, icon: &#x27;fa-solid fa-paste&#x27;, event: &#x27;copyPaste&#x27;, group: &#x27;inputBox&#x27;&#125; - &#123;id: &#x27;copyAll&#x27;, name: &#x27;全选文本&#x27;, icon: &#x27;fa-solid fa-object-ungroup&#x27;, event: &#x27;copyAll&#x27;, group: &#x27;inputBox&#x27;&#125; - &#123;id: &#x27;copyCut&#x27;, name: &#x27;剪切文本&#x27;, icon: &#x27;fa-solid fa-cut&#x27;, event: &#x27;copyCut&#x27;, group: &#x27;inputBox&#x27;&#125; # 文本选中类组件 # 生效于右键选中文本，__text__ 为选中的文本。 seletctText: - &#123;id: &#x27;copyText&#x27;, name: &#x27;复制文本&#x27;, icon: &#x27;fa-solid fa-copy&#x27;, event: &#x27;copyText&#x27;, group: &#x27;seletctText&#x27;&#125; - &#123;id: &#x27;searchWord&#x27;, name: &#x27;站内搜索&#x27;, icon: &#x27;fa-solid fa-search&#x27;, event: &#x27;OpenSearch(__text__)&#x27;, group: &#x27;seletctText&#x27;&#125; - &#123;id: &#x27;bingSearch&#x27;, name: &#x27;必应搜索&#x27;, icon: &#x27;fa-solid fa-search&#x27;, event: &#x27;window.open(`https://cn.bing.com/search?q=$&#123;__text__&#125;`)&#x27;, group: &#x27;seletctText&#x27;&#125; #- &#123;id: &#x27;googleSearch&#x27;, name: &#x27;谷歌搜索&#x27;, icon: &#x27;fa-solid fa-search&#x27;, event: &#x27;window.open(`https://www.google.com/search?q=$&#123;__text__&#125;`)&#x27;, group: &#x27;seletctText&#x27;&#125; # 链接判断组件 # 生效于链接处的右键行为，__link__ 为链接地址 elementCheck: - &#123;id: &#x27;openTab&#x27;, name: &#x27;新标签页打开&#x27;, icon: &#x27;fa-solid fa-external-link-square-alt&#x27;, event: &#x27;window.open(__link__)&#x27;, group: &#x27;elementCheck&#x27;&#125; - &#123;id: &#x27;copyLink&#x27;, name: &#x27;复制链接地址&#x27;, icon: &#x27;fa-solid fa-link&#x27;, event: &#x27;copyLink&#x27;, group: &#x27;elementCheck&#x27;&#125; # 图片判断类组件 # 生效于图片类的右键行为，__link__ 为链接地址 elementImage: - &#123;id: &#x27;copyImg&#x27;, name: &#x27;复制图片&#x27;, icon: &#x27;fa-solid fa-image&#x27;, event: &#x27;copyImg&#x27;, group: &#x27;elementImage&#x27;&#125; - &#123;id: &#x27;googleImg&#x27;, name: &#x27;谷歌识图&#x27;, icon: &#x27;fa-solid fa-images&#x27;, event: &#x27;window.open(`https://www.google.com.hk/searchbyimage?image_url=$&#123;__link__&#125;`)&#x27;, group: &#x27;elementImage&#x27;&#125; # 文章页面组件 # 生效于 post.article 页面 articlePage: - &#123;id: &#x27;printMode&#x27;, name: &#x27;打印页面&#x27;, icon: &#x27;fa-solid fa-print&#x27;, event: &#x27;printMode&#x27;, group: &#x27;articlePage&#x27;&#125; - &#123;id: &#x27;readMode&#x27;, name: &#x27;阅读模式&#x27;, icon: &#x27;fa-solid fa-book-open&#x27;, event: &#x27;readMode&#x27;, group: &#x27;articlePage&#x27;&#125; # 右键自定义菜单区域 menus: link: - &#123;id: &#x27;help&#x27;, name: &#x27;常见问题&#x27;, icon: &#x27;fa-solid fa-question&#x27;, link: &#x27;https://volantis.js.org/faqs/&#x27;, group: &#x27;link&#x27;&#125; - &#123;id: &#x27;examples&#x27;, name: &#x27;示例博客&#x27;, icon: &#x27;fa-solid fa-rss&#x27;, link: &#x27;https://volantis.js.org/examples/&#x27;, group: &#x27;link&#x27;&#125; - &#123;id: &#x27;contributors&#x27;, name: &#x27;加入社区&#x27;, icon: &#x27;fa-solid fa-fan&#x27;, link: &#x27;https://volantis.js.org/contributors/&#x27;, group: &#x27;link&#x27;&#125; - hr - &#123;id: &#x27;source_docs&#x27;, name: &#x27;本站源码&#x27;, icon: &#x27;fa-solid fa-code-branch&#x27;, link: &#x27;https://github.com/volantis-x/volantis-docs/&#x27;, group: &#x27;link&#x27;&#125; - &#123;id: &#x27;source_theme&#x27;, name: &#x27;主题源码&#x27;, icon: &#x27;fa-solid fa-code-branch&#x27;, link: &#x27;https://github.com/volantis-x/hexo-theme-volantis/&#x27;, group: &#x27;link&#x27;&#125; darkMode: - &#123;id: &#x27;darkMode&#x27;, name: &#x27;暗黑模式&#x27;, icon: &#x27;fa-solid fa-moon&#x27;, event: &#x27;volantis.dark.toggle()&#x27;, group: &#x27;darkMode&#x27;&#125;### 高级玩法可以利用 Custom Files 自定义文件 功能，实现自定义右键菜单脚本及菜单项控制。 一个在右键菜单中添加 查看上一篇、查看下一篇 菜单项的范例： blog/_config.volantis.ymlblog/source/_volantis/bodyEnd.ejs省略了部分不相关内容rightmenus: order: - menus.prevNext menus: prevNext: - &#123;id: &#x27;prev&#x27;, name: &#x27;查看上一篇&#x27;, icon: &#x27;fa-solid fa-angles-left&#x27;, event: &quot;volantis.rightmenu.jump(&#x27;prev&#x27;)&quot;, group: &#x27;prevNext&#x27;&#125; - &#123;id: &#x27;next&#x27;, name: &#x27;查看下一篇&#x27;, icon: &#x27;fa-solid fa-angles-right&#x27;, event: &quot;volantis.rightmenu.jump(&#x27;next&#x27;)&quot;, group: &#x27;prevNext&#x27;&#125;为了方便管理，将函数挂在 volantis.rightmenu 对象下&lt;script&gt; volantis.rightmenu.jump = (type) =&gt; &#123; const selector = type === &#x27;prev&#x27; ? &#x27;article .prev-next a.prev&#x27; : &#x27;article .prev-next a.next&#x27;; const item = document.querySelector(selector); if(!!item) &#123; if(typeof pjax !== &#x27;undefined&#x27;) &#123; pjax.loadUrl(item.href) &#125; else &#123; window.location.href = item.href; &#125; &#125; &#125; volantis.rightmenu.handle(() =&gt; &#123; const prev = document.querySelector(&#x27;#prev&#x27;).parentElement, next = document.querySelector(&#x27;#next&#x27;).parentElement, articlePrev = document.querySelector(&#x27;article .prev-next a.prev p.title&#x27;), articleNext = document.querySelector(&#x27;article .prev-next a.next p.title&#x27;); prev.style.display = articlePrev ? &#x27;block&#x27; : &#x27;none&#x27;; prev.title = articlePrev ? articlePrev.innerText : null; next.style.display = articleNext ? &#x27;block&#x27; : &#x27;none&#x27;; next.title = articleNext ? articleNext.innerText : null; &#125;, &#x27;prevNext&#x27;, false) &lt;/script&gt; 老版右键菜单目前老版右键与新版右键共存，但同时只能开启一个自定义右键菜单。 配置文件 blog/_config.volantis.yml # 自定义右键菜单rightmenu: enable: false faicon: fa # 公共图标类型 fa fal fa-solid fa-duotone # hr: 分割线, music: 音乐控制器 layout: [home, hr, help, examples, contributors, hr, source_docs, source_theme, hr, print, darkmode, reading, music] ### 可选功能项 ### print: # 只有文章页才允许自定义打印 name: 打印页面 icon: fa fa-print darkmode: # 需开启 plugins.darkmodejs name: 暗黑模式 icon: fa fa-moon reading: name: 阅读模式 icon: fa fa-book-open customPicUrl: # 右键的图片复制：只有 Chrome 支持，且只支持 PNG 格式的图片。 enable: false # 如果使用了对象存储且开启了自适应 Webp，那么可以提供额外的链接用以替换图片的访问地址 old: #https://static.inkss.cn/img/article/ new: #https://cdn.jsdelivr.net/gh/inkss/inkss-cdn@master/img/article/ music: # 当设定全局音乐播放器时，是否一直显示音乐控制菜单。false：仅当音乐播放时启用 alwaysShow: true ### 自定义菜单 ### help: name: 常见问题 icon: fa fa-question url: https://volantis.js.org/faqs/ examples: name: 示例博客 icon: fa fa-rss url: https://volantis.js.org/examples/ contributors: name: 加入社区 icon: fa fa-fan fa-spin url: https://volantis.js.org/contributors/ source_docs: name: 本站源码 icon: fa fa-code-branch url: https://github.com/volantis-x/volantis-docs/ source_theme: name: 主题源码 icon: fa fa-code-branch url: https://github.com/volantis-x/hexo-theme-volantis/#### 设置网站导航栏导航栏配置导航栏分为 logo、menu、search 三个区域设置，其中 logo 区域如果设置了图片，则不能显示图标和标题， menu 区域的设置可以写在一个单独的文件中。 blog/_config.volantis.yml# 注意事项：建议规范全站路径 URL 最后带一个 &quot;/&quot; 例如 &quot;about/&quot;navbar: visiable: auto # always, auto logo: # choose [img] or [icon + title] img: volantis-static/media/org.volantis/blog/Logo-NavBar@3x.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png icon: title: menu: - name: 博客 icon: fa-solid fa-rss url: / - name: 分类 icon: fa-solid fa-folder-open url: categories/ - name: 标签 icon: fa-solid fa-tags url: tags/ - name: 归档 icon: fa-solid fa-archive url: archives/ - name: 友链 icon: fa-solid fa-link url: friends/ - name: 关于 icon: fa-solid fa-info-circle url: about/ search: Search... # Search bar placeholder 菜单嵌套导航栏菜单支持嵌套，嵌套的属性名为 rows ，写法示例： ...- name: 更多 icon: fa-solid fa-ellipsis-v rows: - name: 主题源码 url: https://github.com/volantis-x/hexo-theme-volantis/ - name: 更新日志 url: https://github.com/volantis-x/hexo-theme-volantis/releases/ - name: hr - name: 有疑问？ rows: - name: 看 FAQ url: faqs/ - name: 看 本站源码 url: https://github.com/volantis-x/volantis-docs/ - name: 提 Issue url: https://github.com/volantis-x/hexo-theme-volantis/issues/ - name: hr - name: 公告和测试博文 url: archives/ - name: 示例博客 url: examples/ - name: 特别感谢 url: contributors/ 分割线在子菜单中，新增一个只有 name: hr 的“菜单”就会被渲染成一个分割线。 - name: hr 小标题在子菜单中，新增一个只有 name: 小标题内容（也可以有 icon: 小标题的图标）的“菜单”就会被渲染成一个小标题。 ...- name: 近期 icon: fa-solid fa-clock url: / rows: - name: 热门文章 icon: fa-solid fa-fire - name: ProHUD 开源库的设计思路 url: blog/2019-08-27-prohud/ - name: ValueX：实用的安全对象类型转换库 url: blog/2019-08-29-valuex/ - name: 心率管家 App 的设计与开发 url: blog/2019-07-23-heartmate/ 播放器在子菜单中，新增一个 icon: fa-solid fa-compact-disc 的“菜单”就会被渲染成一个 APlayer 播放器。 - name: 背景音乐 icon: fa-solid fa-compact-disc 设置网站页脚您通过 layout 可以自由布局网站页脚内容 aplayer, social, license, info, copyright。 blog/_config.volantis.ymlsite_footer: # layout of footer: [aplayer, social, license, info, copyright] layout: [aplayer, social, license, info, copyright] social: - icon: fas fa-rss url: atom.xml - icon: fas fa-envelope url: mailto:me@xaoxuu.com - icon: fab fa-github url: https://github.com/xaoxuu - icon: fas fa-headphones-alt url: https://music.163.com/#/user/home?id=63035382 copyright: &#x27;[Copyright © 2017-2021 XXX](/)&#x27; # You can add your own property here. (Support markdown, for example: br: &#x27;&lt;br&gt;&#x27;) br: &#x27;&lt;br&gt;&#x27; 其中，aplayer 需要在插件部分设置中启用。您可以新增文字属性，用于展示其它文字信息，例如： blog/_config.volantis.ymlsite_footer: layout: [..., br, hello, ...] ... # You can add your own property here. (Support markdown, for example: br: &#x27;&lt;br&gt;&#x27;) br: &#x27;&lt;br&gt;&#x27; hello: &#x27;[Hello World](/)&#x27; 网站与文章封面封面高度blog/_config.volantis.ymlcover: height_scheme: full # full, half ... 目前主题提供两种首页封面高度方案，其它页面均为半屏幕高度。 封面布局方案blog/_config.volantis.ymlcover: ... scheme: dock # search (搜索), dock (坞), featured (精选), focus (焦点) ... 布局方案 适合场景 search 注重搜索 dock 入口选项比较多 featured 选项在4个左右 focus 选项在4个左右 默认显示设置blog/_config.volantis.ymlcover: ... display: home: true archive: false others: false # can be written in front-matter &#x27;cover: true&#x27; 由于主页、归档是 hexo 自动生成的，您需要在主题配置文件中设置是否显示封面，而其它页面则可以在 front-matter 中通过设置 cover: true/false 来决定显示封面或者不显示封面。 文章布局配置# 文章布局article: # 文章列表页面的文章卡片布局方案 preview: scheme: landscape # landscape # pin icon for post pin_icon: https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f4cc.svg # auto generate title if not exist auto_title: true # false, true # auto generate excerpt if not exist auto_excerpt: true # false, true # show split line or not line_style: solid # hidden, solid, dashed, dotted # show readmore button readmore: auto # auto, always # 文章详情页面的文章卡片本体布局方案 body: # 文章顶部信息 # 从 meta_library 中取 top_meta: [author, category, date, counter] # ---------------- # 文章页脚组件 footer_widget: # ---------------- # 参考资料、相关资料等 (for layout: post/docs) references: title: 参考资料 icon: fas fa-quote-left # 在 front-matter 中: # references: # - title: 某篇文章 # url: https:// # 即可显示此组件。 # ---------------- # 相关文章，需要安装插件 (for layout: post) # npm i hexo-related-popular-posts related_posts: enable: false title: 相关文章 icon: fas fa-bookmark max_count: 5 # 设为空则不使用文章头图 placeholder_img: https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/046.jpg # ---------------- # 版权声明组件 (for layout: post/docs) copyright: enable: true permalink: &#x27;本文永久链接是：&#x27; content: - &#x27;博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议&#x27; - permalink # ---------------- # 打赏组件 (for layout: post/docs) donate: enable: false images: - https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png - https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png # 文章底部信息 # 从 meta_library 中取 bottom_meta: [updated, tags, share] # meta library meta_library: # 默认文章作者（可在 front-matter 中覆盖） author: avatar: name: 请设置文章作者 url: / # 文章创建日期 date: icon: fas fa-calendar-alt title: &#x27;发布于：&#x27; format: &#x27;ll&#x27; # 日期格式 http://momentjs.com/docs/ # 文章更新日期 updated: icon: fas fa-edit title: &#x27;更新于：&#x27; format: &#x27;ll&#x27; # 日期格式 http://momentjs.com/docs/ # 文章分类 category: icon: fas fa-folder-open # 文章浏览计数 counter: icon: fas fa-eye unit: &#x27;次浏览&#x27; # 文章字数和阅读时长 wordcount: icon_wordcount: fas fa-keyboard icon_duration: fas fa-hourglass-half # 文章标签 tags: icon: fas fa-hashtag # 分享 share: - id: qq img: https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/qq.png # - id: qzone # img: https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/qzone.png - id: weibo img: https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/weibo.png - id: # qrcode # 当id为qrcode时需要安装插件 npm i hexo-helper-qrcode img: # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/wechat.png - id: # telegram img: # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/telegram.png 其中 top_meta 和 bottom_meta 部分的取值自 meta_library 库。 侧边栏配置侧边栏小组件与 meta 库不同的是：除了现有的 widget ，您可以很轻易地创建自己的 widget ，然后放在需要的地方。此外，您还可以将 widget 写在单独的文件中。 查看所有相关配置 blog/_config.volantis.ymlsidebar: # 主页、分类、归档等独立页面 for_page: [blogger, category, tagcloud, qrcode] # layout: docs/post 这类文章页面 for_post: [toc] # 侧边栏组件库 widget_library: # --------------------------------------- # blogger info widget blogger: class: blogger display: [desktop, mobile] # [desktop, mobile] avatar: https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png shape: rectangle # circle, rectangle url: /about/ title: subtitle: jinrishici: true # Poetry Today. You can set a string, and it will be displayed when loading fails. social: true # --------------------------------------- # toc widget (valid only in articles) toc: class: toc display: [desktop, mobile] # [desktop, mobile] header: icon: fas fa-list title: 本文目录 list_number: false min_depth: 2 max_depth: 5 # --------------------------------------- # category widget category: class: category display: [desktop] # [desktop, mobile] header: icon: fas fa-folder-open title: 文章分类 url: /blog/categories/ # --------------------------------------- # tagcloud widget tagcloud: class: tagcloud display: [desktop, mobile] # [desktop, mobile] header: icon: fas fa-tags title: 热门标签 url: /blog/tags/ min_font: 14 max_font: 24 color: true start_color: &#x27;#999&#x27; end_color: &#x27;#555&#x27; # --------------------------------------- # qrcode widget donate: class: qrcode display: [desktop, mobile] # [desktop, mobile] height: 64px # Automatic height if not set images: - https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png - https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png # --------------------------------------- # webinfo widget webinfo: class: webinfo display: [desktop] header: icon: fa-solid fa-award title: 站点信息 type: article: enable: true text: &#x27;文章数目：&#x27; unit: &#x27;篇&#x27; runtime: enable: true data: &#x27;2020/01/01&#x27; # 填写建站日期 text: &#x27;已运行时间：&#x27; unit: &#x27;天&#x27; wordcount: enable: true text: &#x27;本站总字数：&#x27; # 需要启用 wordcount unit: &#x27;字&#x27; visitcounter: siteuv: enable: true text: &#x27;本站访客数：&#x27; unit: &#x27;人&#x27; sitepv: enable: true text: &#x27;本站总访问量：&#x27; unit: &#x27;次&#x27; lastupd: enable: true friendlyShow: true # 更友好的时间显示 text: &#x27;最后活动时间：&#x27; unit: &#x27;日&#x27; 每一个小部件都有 class 和 display，前者代表这个小部件是什么，后者代表这个小部件在什么桌面和移动平台中是否显示，如果在移动平台显示，由于屏幕宽度有限，侧边栏的小部件则会被移动到正文区域下方，因此部分侧边栏小部件便失去意义，建议设置为仅桌面端显示。 小部件名: class: 小部件类别 display: [小部件在桌面端是否显示, 小部件在移动设备是否显示] pjaxReload: true # 是否 pjax 重载 默认 true; 设置为 false 时 确保所有页面都含有该小部件 sticky: true # 是否开启粘性定位，默认 false；设置为 true 时固定在屏幕中 博主信息部件blog/_config.volantis.ymlblogger: class: blogger display: [desktop] # [desktop, mobile] avatar: https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png title: subtitle: jinrishici: true # Poetry Today. You can set a string, and it will be displayed when loading fails. social: true 其中，今日诗词 jinrishici 如果设置为一个字符串，这个字符串会变成占位文字，加载失败时显示。如果不需要，就请设置为 jinrishici: false。social 的具体内容请在网站页脚部分设置。 文章目录部件blog/_config.volantis.ymltoc: class: toc display: [desktop, mobile] # [desktop, mobile] header: icon: fas fa-list title: 本文目录 list_number: false min_depth: 2 max_depth: 5 这个部件只能放置在侧边栏，并且在文章中有效。在移动设备中预览时，手指向上滑动时，导航栏右边会出现 TOC 按钮，点击即可展开 TOC 部件。如果您需要显示章节序号，请设置 list_number。 min_depth 和 max_depth 代表 TOC 支持的标题层级，最大范围是2～6。 文章分类部件blog/_config.volantis.ymlcategory: class: category display: [desktop] # [desktop, mobile] header: icon: fas fa-folder-open title: 文章分类 url: /blog/categories/ 这个部件可以直接显示所有文章分类，如果您希望有一个独立的页面来展示，需要自己创建一个文件，具体操作在「页面」部分文档中。 标签云部件blog/_config.volantis.ymltagcloud: class: tagcloud display: [desktop] # [desktop, mobile] header: icon: fas fa-tags title: 热门标签 url: /blog/tags/ min_font: 14 max_font: 24 color: true start_color: &#x27;#999&#x27; end_color: &#x27;#555&#x27; 这个部件可以直接显示所有文章的标签，如果您希望有一个独立的页面来展示，需要自己创建一个文件，具体操作在「页面」部分文档中。 二维码部件blog/_config.volantis.ymldonate: class: qrcode display: [desktop, mobile] # [desktop, mobile] height: 64px # Automatic height if not set images: - https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png - https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png 您可以放置在文章页脚用于展示打赏图片，也可以放置在侧边栏。 通用文本部件blog/_config.volantis.ymlrepos: class: text display: [desktop] # [desktop, mobile] header: icon: fab fa-github title: 点个赞吧 url: https://github.com/xaoxuu/ content: - &#x27;您的赞对我来说很重要，如果您喜欢本主题，希望能够给下面的项目点个赞来支持一下。&#x27; - &#x27;[&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/prohud/logo.png&quot; height=&quot;50px&quot;&gt;](https://github.com/xaoxuu/ProHUD)&#x27; - &#x27;[&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/valuex/logo.png&quot; height=&quot;50px&quot;&gt;](https://github.com/xaoxuu/ValueX)&#x27; - &#x27;[&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/inspire/logo.png&quot; height=&quot;50px&quot;&gt;](https://github.com/xaoxuu/Inspire)&#x27; 您可以创建用于展示任何文本内容的文本部件。 通用列表部件blog/_config.volantis.ymlwiki-hexo-theme: class: list display: [desktop, mobile] # [desktop, mobile] header: icon: fas fa-chevron-left title: Hexo Themes url: /wiki/ rows: - name: Volantis for Hexo url: /wiki/volantis/ - name: Resume for Hexo url: /wiki/resume/ 您可以创建用于展示任何链接列表的列表部件。列表的 rows 中的每一项支持的属性有： name、url、icon、img、avatar，其中 img 是方形图片的链接，avatar 是圆形图片的链接。 组索引这个部件的布局继承自 list 部件，用于展示文章所属的分组的文章列表。请将您的 Volantis 升级至 2.5 版本以上使用。 blog/_config.volantis.ymlgroup-1: class: group display: [desktop, mobile] # [desktop, mobile] header: icon: fab fa-github title: Git url: /wiki/git/ 在文章的 front-matter 中设置： front-mattergroup: group-1order: 16sidebar: [group-1, toc] 「group-1」卡片将会以列表的形式显示所有设置了 group: group-1 的文章，顺序按照 order 从小到大排列。 通用网格部件blog/_config.volantis.ymlfeedback: class: grid display: [desktop, mobile] header: icon: fas fa-headset title: 联系开发者 url: https://github.com/volantis-x/hexo-theme-volantis fixed: true # 固定宽度 rows: - name: 反馈BUG icon: fas fa-bug url: https://github.com/volantis-x/hexo-theme-volantis/issues/ - name: 疑问求助 icon: fas fa-question-circle url: https://github.com/volantis-x/hexo-theme-volantis/issues/ - name: 提个建议 icon: fas fa-lightbulb url: https://github.com/volantis-x/hexo-theme-volantis/issues/ 您可以创建用于展示任何链接列表的网格部件。网格默认根据文字长度自动确定每一个格子的宽度，如果文字长短不一，建议通过设置 fixed: true 来固定宽度，此时文字过长的格子中的文字会换行显示。 通用页面部件blog/_config.volantis.ymltest: class: page display: [desktop, mobile] pid: haha content: excerpt # excerpt, more, content 您可以把整个页面的md内容作为一个小部件渲染显示出来。只需要设置小部件里的 pid 属性和文章的 front-matter 中设置一样的 pid 即可。 content 代表这个部件显示的内容，可选 excerpt，more，content 分别对应文章的摘要、摘要后面的内容、全文。 音乐部件blog/_config.volantis.ymlmusic: class: music display: [desktop, mobile] # [desktop, mobile] pjaxReload: false 选择评论系统目前共支持 14 款评论系统： artalk, giscus, beaudar, utterances, twikoo, waline, discuss, disqus, disqusjs, gitalk, vssue, livere, isso, hashover blog/_config.volantis.ymlcomments: title: &lt;i class=&#x27;fas fa-comments&#x27;&gt;&lt;/i&gt; 评论 subtitle: service: giscus GitHub Discussions 系列 giscus A comments system powered by GitHub Discussions. https://giscus.app/blog/_config.volantis.ymlcomments: ... service: giscus ... # giscus # https://giscus.app # https://github.com/laymonage/giscus giscus: # 以下配置按照 yml 格式增删填写即可 # repo: xxx/xxx # repo-id: xxx # category: xxx # category-id: xxx # mapping: &quot;pathname&quot; # reactions-enabled: &quot;1&quot; # emit-metadata: &quot;0&quot; # lang: &quot;zh-CN&quot; # 以上配置按照 yml 格式增删填写即可 theme: light: &quot;light&quot; # https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/light.css dark: &quot;dark&quot; # https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/dark.css GitHub Issues 系列 beaudarutterancesVssueGitalk Beaudar 名称源于粤语“表达”的发音，是 Utterances 的中文版本。 https://beaudar.lipk.org/blog/_config.volantis.ymlcomments: ... service: beaudar ... # beaudar # https://beaudar.lipk.org/ beaudar: repo: xxx/xxx issue-term: pathname issue-number: branch: main position: top order: desc theme: light: github-light dark: github-dark label: ✨💬✨ A lightweight comments widget built on GitHub issues. https://utteranc.es/blog/_config.volantis.ymlcomments: ... service: utterances ... # utterances # https://utteranc.es/ utterances: repo: xxx/xxx issue-term: pathname issue-number: theme: light: github-light dark: github-dark label: ✨💬✨ Vue 驱动的、基于 Issue 的评论插件 https://vssue.js.org/zh/blog/_config.volantis.ymlcomments: ... service: vssue ... vssue: owner: repo: clientId: clientSecret: A modern comment component based on Github Issue and Preact. https://gitalk.github.io/blog/_config.volantis.ymlcomments: ... service: gitalk ... gitalk: clientID: clientSecret: repo: owner: admin: # []clientID 和 clientSecret 的获取方法可自行搜索教程，这里仅简单描述一下步骤：点击 GitHub -&gt; Settings https://github.com/settings/profile点击 Developer settings https://github.com/settings/developers点击 New OAuth App https://github.com/settings/applications/new填写信息：Application name 随便填，我的是：xaoxuu.comHomepage URL 和 Authorization callback URL 都写你的网址，我的是：https://xaoxuu.com可以通过设置 gitalk.id 实现多个页面共用一个评论框。front-matter---gitalk: id: /wiki/volantis/--- Disqus 系列 DisqusDisqusJSIsso Disqus - The #1 way to build an audience on your website. https://disqus.com/blog/_config.volantis.ymlcomments: ... service: disqus ... disqus: shortname:可以通过设置 disqus.path 实现多个页面共用一个评论框。front-matter---disqus: path: /wiki/volantis/--- Render Disqus comments in Mainland China using Disqus API https://github.com/SukkaW/DisqusJSblog/_config.volantis.ymlcomments: ... service: disqusjs ... # DisqusJS # https://github.com/SukkaW/DisqusJS disqusjs: path: # 全局评论地址 # 配置项按照yml格式继续填写即可 除了 [siteName url identifier] 选项 #shortname: #api: #apikey: #admin: #nesting: A commenting server similar to Disqus. https://posativ.org/isso/blog/_config.volantis.ymlcomments: ... service: isso ... isso: url: https://example.com/(path/) src: https://example.com/(path/)js/embed.min.js Valine 衍生系列 Valine 在 5.0 版本被移除,具体原因可参考hexo-theme-next#188#issuecomment-766578906以下是在解决 valine 遗留问题同一时期产生的评论系统故归为一类, 然在其社区issue中也报告了类似的攻击事件(eg: twikoo#157 waline#424 waline#430),故请谨慎选择.discusstwikooWaline 一款简单，安全，免费的评论系统 | A simple, safe, free comment system https://discuss.js.orgblog/_config.volantis.ymlcomments: ... service: discuss ... # Discuss # https://discuss.js.org discuss: js: https://cdn.jsdelivr.net/npm/discuss/dist/Discuss.js # 建议锁定版本 serverURLs: # Discuss server address url # https://discuss.js.org/Quick-Start.html#path其中，placeholder 支持在 front-matter 中设置。front-matter---discuss: placeholder: 你觉得xxx怎么样呢？---也可以通过设置 discuss.path 实现多个页面共用一个评论框。front-matter---discuss: path: /--- 一个简洁、安全、免费的静态网站评论系统 | A simple, safe, free comment system. https://twikoo.js.org/blog/_config.volantis.ymlcomments: ... service: twikoo ... twikoo: js: https://cdn.jsdelivr.net/npm/twikoo@latest # 建议锁定版本 path: # 全局评论地址 # 其他配置项按照yml格式继续填写即可 除了 [el path] 选项 envId: xxxxxxxxxxxxxxx # 腾讯云环境id其中，placeholder 支持在 front-matter 中设置。front-matter---twikoo: placeholder: 你觉得xxx怎么样呢？---也可以通过设置 twikoo.path 实现多个页面共用一个评论框。front-matter---twikoo: path: /--- 一个简洁、安全、免费的静态网站评论系统 | A simple, safe, free comment system. https://waline.js.org/blog/_config.volantis.ymlcomments: ... service: waline ... # Waline # https://waline.js.org/ waline: js: https://cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js path: # 全局评论地址 目前设置全局评论地址后visitor失效,这是waline的问题 placeholder: 快来评论吧~ # 评论占位提示 imageHosting: https://7bu.top/api/upload # 图床api（默认使用去不图床） # 其他配置项按照yml格式继续填写即可 除了 [el path placeholder uploadImage] 选项 serverURL: xxxxxxxxxxxxxxx # Waline 的服务端地址（必填） 测试用地址: https://waline-ruddy.vercel.app ... 可选配置项详见源码其中，placeholder 支持在 front-matter 中设置。front-matter---waline: placeholder: 你觉得xxx怎么样呢？---也可以通过设置 waline.path 实现多个页面共用一个评论框。front-matter---waline: path: /--- Others 其他系列 ArtalkLivereHashoverMore... 一款简洁的自托管评论系统 | A Selfhosted Comment System. https://artalk.js.org/blog/_config.volantis.ymlcomments: ... service: artalk ... artalk: js: https://cdn.jsdelivr.net/npm/artalk@2.1.3/dist/Artalk.js css: https://cdn.jsdelivr.net/npm/artalk@2.1.3/dist/Artalk.css server: http://127.0.0.1:8080/api # 修改为自建的后端服务地址其中，placeholder 支持在 front-matter 中设置。front-matter---artalk: placeholder: 你觉得xxx怎么样呢？---也可以通过设置 artalk.path 实现多个页面共用一个评论框。front-matter---artalk: path: /--- Communication makes better world. https://www.livere.com/blog/_config.volantis.ymlcomments: ... service: livere ... livere: uid: #你的livere的uid在这里查看你的 uid：https://livere.com/insight/myCode，在【代码管理 -&gt; 一般网站】中找到如下这段代码，其中 data-uid 中的内容就是你的 livere_uid。&lt;!-- 来必力City版安装代码 --&gt;&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;你的livere的uid&quot;&gt;... A free and open source PHP comment system designed to allow completely anonymous comments and easy theming. https://www.barkdull.org/software/hashoverblog/_config.volantis.ymlcomments: ... service: hashover ... hashover: src: https://example.com/(path/)comments.phpblog/themes/volantis/layout/_third-party/comments/评论系统名称/layout.ejs这里写布局代码blog/themes/volantis/layout/_third-party/comments/评论系统名称/script.ejs这里要写加载 js 的代码收录更多评论系统 可以通过在 front-matter 设置 config 实现在特定页面修改评论系统的相关配置。 支持的有(按字母顺序): discuss, giscus, gitalk, twikoo, waline front-matter---gitalk: config: id: /233/--- 站内搜索blog/_config.volantis.ymlsearch: enable: true service: hexo # hexo js: https://cdn.jsdelivr.net/xxxxxxxx/js/search/hexo.js 默认配置为 Hexo 搜索，但是需要安装插件才能使用： npm i -S hexo-generator-json-content 原 google, algolia, azure, baidu 站内搜索 系祖传代码, 且文档丢失, 不便后续维护 在 5.0 版本移除 插件库概述Volantis 为丰富的插件提供了兼容性优化。大部分插件您只需开启和关闭，无需进行设置。 幻灯片背景(视差滚动效果)jquery.backstretch 在 5.0 版本 移除, 被 parallax 替代 blog/_config.volantis.ymlplugins: ... parallax: enable: true position: cover # cover: sticky on the cover. fixed: Fixed as background for the site. shuffle: true # shuffle playlist duration: 10000 # Duration (ms) fade: 1500 # fade duration (ms) (Not more than 1500) images: # For personal use only. At your own risk if used for commercial purposes !!! - https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg ... 幻灯片背景图片显示的位置可以选择粘贴在封面上，跟随封面一起滑动，也可以选择固定作为网页背景图片。 highlight.jsblog/_config.volantis.ymlplugins: ... # 代码高亮 code_highlight: highlightjs # highlightjs or prismjs # highlight.js highlightjs: copy_code: true # 如果开启 js, hexo.config.highlight.enable 需要设置为 false js: #https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.1.0/build/highlight.min.js # Please set hexo.config.highlight.enable = false !!! css: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.1.0/build/styles/default.min.css # more: https://www.jsdelivr.com/package/npm/highlight.js?path=styles 如果需要使用 highlight.js 进行语法高亮，请将站点配置文件中的 highlight.enable 设置为 false 否则不会加载插件。您可以在 94 种 语法高亮主题 中挑选喜爱的主题，然后替换上面的 css 链接。 如果您使用 highlight.js 请确保没有使用 hexo 官方的 codeblock 标签，否则会报错。 经测试，使用 highlight.js 的情况下，部分容器内的代码可能仍然会被渲染甚至报错。 APlayer 音乐播放器blog/_config.volantis.ymlplugins: ... # APlayer is only available in mainland China. # APlayer config: https://github.com/metowolf/MetingJS aplayer: enable: true js: aplayer: https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js meting: https://cdn.jsdelivr.net/npm/meting@2.0/dist/Meting.min.js # Required server: netease # netease, tencent, kugou, xiami, baidu type: playlist # song, playlist, album, search, artist id: 3175833810 # song id / playlist id / album id / search keyword # Optional fixed: false # enable fixed mode theme: &#x27;#1BCDFC&#x27; # main color autoplay: false # audio autoplay order: list # player play order, values: &#x27;list&#x27;, &#x27;random&#x27; loop: all # player loop play, values: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27; volume: 0.7 # default volume, notice that player will remember user setting, default volume will not work after user set volume themselves list_max_height: 320px # list max height list_folded: true APlayer播放器只可以在中国大陆地区使用。相关文档： APlayer | MetingJS 暗黑模式blog/_config.volantis.ymlplugins: ... # 暗黑模式 darkmode # 开关按钮：在 navbar.menu 中添加： # - name: 暗黑模式 # 可自定义 # icon: fas fa-moon # 可自定义 # toggle: darkmode darkmode: enable: true 结束支持blog/_config.volantis.ymlplugins: ... # 旧版 Internet Explorer 淘汰行动 # https://www.microsoft.com/zh-cn/WindowsForBusiness/End-of-IE-support # 本主题不支持Internet Explorer的任何版本!!! killOldVersionsOfIE: enable: true # 禁用JavaScript提示 # 本页面需要浏览器支持（启用）JavaScript # 主题中的某些插件必须启用JavaScript才能正常工作，例如开启scrollreveal如果禁用JavaScript会导致卡片消失 killNoScript: enable: true Artitalkblog/_config.volantis.ymlplugins: ... # Artitalk https://artitalk.js.org # 配置过程请参考：https://artitalk.js.org/doc.html # 使用过旧版本的请修改Leancloud shuoshuo class部分列名：https://artitalk.js.org/release.html # 除appID和appKEY外均为选填项 artitalk: # Set `plugins: [&quot;artitalk&quot;]` to enable in front-matter # 不支持 Pjax # 配置项按照yml格式继续填写即可 appId: ogP8qj3veMh0LFpFWMPOyF0X-MdYXbMMI # your appID appKey: nHXLd3N3Jgh460t2iRQKWAtr # your appKEY # serverURL: #leancloud绑定的api访问域名，使用国际版的话不需要填写 # lang: # 语言设置，zh为汉语，en为英语，es为西班牙语。默认为汉语 # pageSize: #每页说说的显示数量 # shuoPla: #在编辑说说的输入框中的占位符 # avatarPla: #自定义头像url的输入框的占位符 # motion: #加载动画的开关，1为开，0为关，默认为开 # bgImg: #说说输入框背景图片url # color1: #说说背景颜色1&amp;按钮颜色1 # color2: #说说背景颜色2&amp;按钮颜色2 # color3: #说说字体颜色 # cssUrl: #自定义css接口 BBtalkblog/_config.volantis.ymlplugins: ... # BBtalk https://bb.js.org bbtalk: # Set `plugins: [&quot;bbtalk&quot;]` to enable in front-matter # 支持 Pjax js: https://cdn.jsdelivr.net/npm/bbtalk@0.1.5/dist/bbtalk.min.js # BBtalk.js appId: 0KzOX4vC7Jsk6vzUGNeEiUaI-gzGzoHsz # your appID appKey: HwCiWuxfpvKiLm4teCUgTIba # your appKEY serverURLs: https://bbapi.heson10.com # Request Api 域名 Tidioblog/_config.volantis.ymlplugins: ... # 聊天功能 chat_service: tidio # tidio or gitter # Tidio # https://www.tidio.com/ tidio: id: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 友链朋友圈blog/_config.volantis.ymlplugins: ... # 友链朋友圈 hexo-circle-of-friends # https://github.com/Rock-Candy-Tea/hexo-circle-of-friends # https://zfe.space/post/friend-link-circle.html fcircle: # Set `plugins: [&quot;fcircle&quot;]` to enable in front-matter # 支持 Pjax api: &#x27;&#x27; # api 地址 max_number: 20 # 页面展示文章数量 add_number: 10 # 每次加载增加的篇数 opentype: &#x27;_blank&#x27; # &#x27;_blank&#x27;打开新标签,&#x27;_self&#x27;本窗口打开 nofollow: true # 禁止搜索引擎抓取 # loadingCutom: # 自定义loading图 例如: &lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt; | &lt;img src=&quot;你的图片地址&quot; alt=&quot;加载中...&quot;&gt; 消息提示blog/_config.volantis.ymlplugins: ... # 消息提示 # izitoast@1.4.0 message: enable: true css: volantis-static/libs/izitoast/dist/css/iziToast.min.css js: volantis-static/libs/izitoast/dist/js/iziToast.min.js icon: # 默认图标，支持对图标添加颜色，可选值：see：/source/css/_style/_plugins/fontcolor.styl default: fa-solid fa-info-circle light-blue quection: fa-solid fa-question-circle light-blue time: # 默认持续时间 default: 5000 quection: 20000 position: &#x27;topRight&#x27; # 弹出位置 可选值：topRight, bottomRight, bottomLeft, topLeft, topCenter, bottomCenter, center transitionIn: &#x27;bounceInLeft&#x27; # 弹窗打开动画 可选值：bounceInLeft, bounceInRight, bounceInUp, bounceInDown, fadeIn, fadeInDown, fadeInUp, fadeInLeft, fadeInRight, flipInX transitionOut: &#x27;fadeOutRight&#x27; # 弹窗关闭动画 可选值：fadeOut, fadeOutUp, fadeOutDown, fadeOutLeft, fadeOutRight, flipOutX titleColor: &#x27;var(--color-text)&#x27; # 标题颜色 messageColor: &#x27;var(--color-text)&#x27; # 消息颜色 backgroundColor: &#x27;var(--color-card)&#x27; # 默认背景色 zindex: 2147483647 # 层级 copyright: # 是否在复制时弹出版权提示，影响范围：ctrl+c、代码块复制按钮、右键复制选项 enable: true title: &#x27;知识共享许可协议&#x27; message: &#x27;请遵守 CC BY-NC-SA 4.0 协议。&#x27; icon: &#x27;far fa-copyright light-blue&#x27; aplayer: # 是否开启音乐通知；播放、暂停、失败 时的图标 enable: true play: fa-solid fa-play pause: fa-solid fa-pause rightmenu: enable: true # 是否开启右键模块的消息通知 notice: true # 唤醒原右键菜单的通知 轮播标签使用方法参见：swiper blog/_config.volantis.ymlswiper: enable: true css: https://unpkg.com/swiper@6/swiper-bundle.min.css js: https://unpkg.com/swiper@6/swiper-bundle.min.js"},{"title":"标签插件","date":"2022-07-10T13:23:09.923Z","updated":"2022-07-10T10:47:57.766Z","comments":true,"path":"v5/tag-plugins/index.html","permalink":"http://zqyu.top/v5/tag-plugins/","excerpt":"","text":"为了兼容老用户，旧的标签插件在重构之前依然沿用旧的格式，即 command + 空格 作为参数分隔符，而部分新增标签插件是 空格 + 英文竖线 + 空格 ，请注意区分。 我们也在探索哪种分隔符既简单又不容易引起冲突，所以可能存在多种格式，具体以对应文档描述为准。 5.0 版本起临时实验使用英文双冒号 ( :: ) 作为分隔符，之前版本的分隔符写法向下兼容 6.0 版本的分隔符最终计划使用 stellar 的分隔符，之前版本的分隔符写法没有兼容计划 text效果源码带 下划线 的文本；带 着重号 的文本；带 波浪线 的文本；带 删除线 的文本 键盘样式的文本：⌘ + D 密码样式的文本：这里没有验证码带 &#123;% u 下划线 %&#125; 的文本；带 &#123;% emp 着重号 %&#125; 的文本；带 &#123;% wavy 波浪线 %&#125; 的文本；带 &#123;% del 删除线 %&#125; 的文本键盘样式的文本：&#123;% kbd ⌘ %&#125; + &#123;% kbd D %&#125;密码样式的文本：&#123;% psw 这里没有验证码 %&#125; span语法效果源码参数本插件最后更新于 5.0 版本&#123;% span 样式参数::文本内容 %&#125;各种颜色的标签，包括：红色、黄色、绿色、青色、蓝色、灰色。 超大号文字： Volantis A Wonderful Theme for Hexo各种颜色的标签，包括：&#123;% span red::红色 %&#125;、&#123;% span yellow::黄色 %&#125;、&#123;% span green::绿色 %&#125;、&#123;% span cyan::青色 %&#125;、&#123;% span blue::蓝色 %&#125;、&#123;% span gray::灰色 %&#125;。超大号文字：&#123;% span center logo large::Volantis %&#125; &#123;% span center small::A Wonderful Theme for Hexo %&#125; 属性 可选值 字体 logo, code 颜色 red, yellow, green, cyan, blue, gray 大小 small, h4, h3, h2, h1, large, huge, ultra 对齐方向 left, center, right p参数效果源码参数本插件最后更新于 5.0 版本&#123;% p 样式参数::文本内容 %&#125;红色 黄色 绿色 青色 蓝色 灰色 Volantis A Wonderful Theme for Hexo&#123;% p red::红色 %&#125;&#123;% p yellow::黄色 %&#125;&#123;% p green::绿色 %&#125;&#123;% p cyan::青色 %&#125;&#123;% p blue::蓝色 %&#125;&#123;% p gray::灰色 %&#125;&#123;% p center logo large::Volantis %&#125;&#123;% p center small::A Wonderful Theme for Hexo %&#125; 属性 可选值 字体 logo, code 颜色 red, yellow, green, cyan, blue, gray 大小 small, h4, h3, h2, h1, large, huge, ultra 对齐方向 left, center, right noteNoteBlock 是 Blockquote 的增强版，在左边显示图标，并且可以自定颜色。而 Note 是 NoteBlock 的简便写法。 最后更新于 5.0 版本&#123;% note 样式参数::文本内容 %&#125; 演示效果经典用法可以在配置文件中设置默认样式，为简单的一句话提供最的简便写法。 note quote 适合引用一段话 note info 默认主题色，适合中性的信息 note warning 默认黄色，适合警告性的信息 note error&#x2F;danger 默认红色，适合危险性的信息 note done&#x2F;success 默认绿色，适合正确操作的信息 更多图标这些都是默认样式，可以手动加上颜色： note radiation 默认样式 note radiation yellow 可以加上颜色 note bug red 说明还存在的一些故障 note link green 可以放置一些链接 note paperclip blue 放置一些附件链接 note todo 待办事项 note guide clear 可以加上一段向导 note download 可以放置下载链接 note message gray 一段消息 note up 可以说明如何进行更新 note undo light 可以说明如何撤销或者回退 上述示例的源码example:#### 经典用法&#123;% note::可以在配置文件中设置默认样式，为简单的一句话提供最的简便写法。 %&#125;&#123;% note quote::note quote 适合引用一段话 %&#125;&#123;% note info::note info 默认主题色，适合中性的信息 %&#125;&#123;% note warning::note warning 默认黄色，适合警告性的信息 %&#125;&#123;% note danger::note error/danger 默认红色，适合危险性的信息 %&#125;&#123;% note success::note done/success 默认绿色，适合正确操作的信息 %&#125;#### 更多图标这些都是默认样式，可以手动加上颜色：&#123;% note radiation::note radiation 默认样式 %&#125;&#123;% note radiation yellow::note radiation yellow 可以加上颜色 %&#125;&#123;% note bug red::note bug red 说明还存在的一些故障 %&#125;&#123;% note link green::note link green 可以放置一些链接 %&#125;&#123;% note paperclip blue::note paperclip blue 放置一些附件链接 %&#125;&#123;% note todo::note todo 待办事项 %&#125;&#123;% note guide clear::note guide clear 可以加上一段向导 %&#125;&#123;% note download::note download 可以放置下载链接 %&#125;&#123;% note message gray::note message gray 一段消息 %&#125;&#123;% note up::note up 可以说明如何进行更新 %&#125;&#123;% note undo light::note undo light 可以说明如何撤销或者回退 %&#125; 可以支持的参数样式参数位置可以写图标和颜色，多个样式参数用空格隔开。 图标彩色的quote, info, warning, done/success, error/danger 灰色的，也可以指定颜色radiation, bug, idea, link, paperclip, todo, message, guide, download, up, undo 颜色指定颜色clear, light, gray, red, yellow, green, cyan, blue noteblockNoteBlock 是 Blockquote 的增强版，在左边显示图标，并且可以自定颜色。而 Note 是 NoteBlock 的简便写法。 最后更新于 5.0 版本&#123;% noteblock 样式参数（可选）::标题（可选） %&#125;文本段落&#123;% endnoteblock %&#125; 演示效果可以在区块中放置一些复杂的结构，支持嵌套。 标题（可选）Windows 10不是為所有人設計,而是為每個人設計嵌套测试： 请坐和放宽，我正在帮你搞定一切... Folding 测试： 点击查看更多 不要说我们没有警告过你我们都有不顺利的时候 上述示例的源码example:&#123;% noteblock::标题（可选） %&#125;Windows 10不是為所有人設計,而是為每個人設計&#123;% noteblock done %&#125;嵌套测试： 请坐和放宽，我正在帮你搞定一切...&#123;% endnoteblock %&#125;&#123;% folding yellow::Folding 测试： 点击查看更多 %&#125;&#123;% note warning::不要说我们没有警告过你 %&#125;&#123;% noteblock bug red %&#125;我们都有不顺利的时候&#123;% endnoteblock %&#125;&#123;% endfolding %&#125;&#123;% endnoteblock %&#125; 可以支持的参数样式参数位置可以写图标和颜色，多个样式参数用空格隔开。 图标彩色的quote, info, warning, done/success, error/danger 灰色的，也可以指定颜色radiation, bug, idea, link, paperclip, todo, message, guide, download, up, undo 颜色指定颜色clear, light, gray, red, yellow, green, cyan, blue checkbox最后更新于 5.0 版本&#123;% checkbox 样式参数（可选）::文本（支持简单md） %&#125; 演示效果 纯文本测试 支持简单的 markdown 语法 支持自定义颜色 绿色 + 默认选中 黄色 + 默认选中 青色 + 默认选中 蓝色 + 默认选中 增加 减少 叉 上述示例的源码example:&#123;% checkbox 纯文本测试 %&#125;&#123;% checkbox checked::支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;&#123;% checkbox red::支持自定义颜色 %&#125;&#123;% checkbox green checked::绿色 + 默认选中 %&#125;&#123;% checkbox yellow checked::黄色 + 默认选中 %&#125;&#123;% checkbox cyan checked::青色 + 默认选中 %&#125;&#123;% checkbox blue checked::蓝色 + 默认选中 %&#125;&#123;% checkbox plus green checked::增加 %&#125;&#123;% checkbox minus yellow checked::减少 %&#125;&#123;% checkbox times red checked::叉 %&#125; 可以支持的参数颜色red, yellow, green, cyan, blue 样式plus, minus, times 选中状态checked radio最后更新于 5.0 版本&#123;% checkbox 样式参数（可选）::文本（支持简单md） %&#125; 演示效果 纯文本测试 支持简单的 markdown 语法 支持自定义颜色 绿色 黄色 青色 蓝色 上述示例的源码example:&#123;% radio 纯文本测试 %&#125;&#123;% radio checked::支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;&#123;% radio red::支持自定义颜色 %&#125;&#123;% radio green::绿色 %&#125;&#123;% radio yellow::黄色 %&#125;&#123;% radio cyan::青色 %&#125;&#123;% radio blue::蓝色 %&#125; 可以支持的参数颜色red, yellow, green, cyan, blue 选中状态checked timeline最后更新于 3.0 版本&#123;% timeline 时间线标题（可选） %&#125;&#123;% timenode 时间节点（标题） %&#125;正文内容&#123;% endtimenode %&#125;&#123;% timenode 时间节点（标题） %&#125;正文内容&#123;% endtimenode %&#125;&#123;% endtimeline %&#125; 演示效果 2020-07-24 2.6.6 -&gt; 3.0 如果有 hexo-lazyload-image 插件，需要删除并重新安装最新版本，设置 lazyload.isSPA: true。2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 use_cdn: true 则需要删除。2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。2.x 版本的置顶 top: true 改为了 pin: true，并且同样适用于 layout: page 的页面。如果使用了 hexo-offline 插件，建议卸载，3.0 版本默认开启了 pjax 服务。 2020-05-15 2.6.3 -&gt; 2.6.6 不需要额外处理。 2020-04-20 2.6.2 -&gt; 2.6.3 全局搜索 seotitle 并替换为 seo_title。group 组件的索引规则有变，使用 group 组件的文章内，group: group_name 对应的组件名必须是 group_name。group 组件的列表名优先显示文章的 short_title 其次是 title。 上述示例的源码example:&#123;% timeline %&#125;&#123;% timenode 2020-07-24 [2.6.6 -&gt; 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) %&#125;1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。&#123;% endtimenode %&#125;&#123;% timenode 2020-05-15 [2.6.3 -&gt; 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) %&#125;不需要额外处理。&#123;% endtimenode %&#125;&#123;% timenode 2020-04-20 [2.6.2 -&gt; 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) %&#125;1. 全局搜索 `seotitle` 并替换为 `seo_title`。2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。&#123;% endtimenode %&#125;&#123;% endtimeline %&#125; link最后更新于 5.0 版本&#123;% link 标题::链接::图片链接（可选） %&#125; 演示效果如何参与项目https://volantis.js.org/contributors/ 上述示例的源码example:&#123;% link 如何参与项目::https://volantis.js.org/contributors/::https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png %&#125; button这个页面的标签将会在不久后重构 基础按钮请将您的 Volantis 升级至 2.4 版本以上使用。 语法格式参数列表示例写法示例效果&#123;% btn 样式参数（可选）::标题::链接::图标（可选） %&#125; 可选的参数可以省略，但是前后顺序不能乱。样式参数 regular, large, center 图标 第1个或者第2个参数包含 fa- 的那个被识别为图标。example.md:不设置任何参数的 &#123;% btn 按钮:: / %&#125; 适合融入段落中。regular 按钮适合独立于段落之外：&#123;% btn regular::示例博客::https://xaoxuu.com::fas fa-play-circle %&#125;large 按钮更具有强调作用，建议搭配 center 使用：&#123;% btn center large::开始使用::https://volantis.js.org/v3/getting-started/::fas fa-download %&#125;行内按钮 不设置任何参数的 按钮 适合融入段落中。 空心按钮 示例博客 示例博客 示例博客 示例博客 居中： 开始使用 实心按钮 示例博客 示例博客 示例博客 示例博客 居中： 开始使用 富文本按钮请将您的 Volantis 升级至 2.3 版本以上使用。 语法格式参数列表示例写法示例效果&#123;% btns 样式参数 %&#125;&#123;% cell 标题::链接::图片或者图标 %&#125;&#123;% cell 标题::链接::图片或者图标 %&#125;&#123;% endbtns %&#125;样式参数位置可以写图片样式、布局方式，多个样式参数用空格隔开。 圆角样式 默认为方形 rounded, circle 布局方式 默认为自动宽度，适合视野内只有一两个的情况。 参数 含义 wide 宽一点的按钮 fill 填充布局，自动铺满至少一行，多了会换行。 center 居中，按钮之间是固定间距。 around 居中分散 grid2 等宽最多2列，屏幕变窄会适当减少列数。 grid3 等宽最多3列，屏幕变窄会适当减少列数。 grid4 等宽最多4列，屏幕变窄会适当减少列数。 grid5 等宽最多5列，屏幕变窄会适当减少列数。 增加文字样式 可以在容器内增加 &lt;b&gt;标题&lt;/b&gt; 和 &lt;p&gt;描述文字&lt;/p&gt;如果需要显示类似「团队成员」之类的一组含有头像的链接： example.md:&#123;% btns circle grid5 %&#125;&#123;% cell xaoxuu::https://xaoxuu.com::https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu::https://xaoxuu.com::https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu::https://xaoxuu.com::https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu::https://xaoxuu.com::https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu::https://xaoxuu.com::https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% endbtns %&#125; 或者含有图标的按钮： example.md:&#123;% btns rounded grid5 %&#125;&#123;% cell 下载源码::/::fas fa-download %&#125;&#123;% cell 查看文档::/::fas fa-book-open %&#125;&#123;% endbtns %&#125; 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 example.md:&#123;% btns circle center grid5 %&#125;&lt;a href=&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;&gt; &lt;i class=&#x27;fab fa-apple&#x27;&gt;&lt;/i&gt; &lt;b&gt;心率管家&lt;/b&gt; &#123;% p red::专业版 %&#125; &lt;img src=&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;&gt;&lt;/a&gt;&lt;a href=&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;&gt; &lt;i class=&#x27;fab fa-apple&#x27;&gt;&lt;/i&gt; &lt;b&gt;心率管家&lt;/b&gt; &#123;% p green::免费版 %&#125; &lt;img src=&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;&gt;&lt;/a&gt;&#123;% endbtns %&#125;如果需要显示类似「团队成员」之类的一组含有头像的链接： xaoxuu xaoxuu xaoxuu xaoxuu xaoxuu 或者含有图标的按钮： 下载源码 查看文档 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 心率管家 专业版 心率管家 免费版 ghcard最后更新于 5.0 版本&#123;% ghcard 用户名::其它参数（可选） %&#125;&#123;% ghcard 用户名/仓库::其它参数（可选） %&#125; 用户信息卡片 上述示例的源码： example:| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu::theme=vue %&#125; || -- | -- || &#123;% ghcard xaoxuu::theme=buefy %&#125; | &#123;% ghcard xaoxuu::theme=solarized-light %&#125; || &#123;% ghcard xaoxuu::theme=onedark %&#125; | &#123;% ghcard xaoxuu::theme=solarized-dark %&#125; || &#123;% ghcard xaoxuu::theme=algolia %&#125; | &#123;% ghcard xaoxuu::theme=calm %&#125; | 仓库信息卡片 上述示例的源码： example:| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis::theme=vue %&#125; || -- | -- || &#123;% ghcard volantis-x/hexo-theme-volantis::theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis::theme=solarized-light %&#125; || &#123;% ghcard volantis-x/hexo-theme-volantis::theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis::theme=solarized-dark %&#125; || &#123;% ghcard volantis-x/hexo-theme-volantis::theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis::theme=calm %&#125; | 更多参数选择GitHub 卡片 API 参数https://github-readme-stats.vercel.app site网站卡片可以显示网站截图、logo、标题、描述，使用方法和友链标签一模一样，唯一的区别是数据文件名称为 sites.yml，可以和友链数据混用，通过分组过滤实现不一样的效果。 示例写法&#123;% sites only:community_team %&#125; sites only:community_team xaoxuu开发者MHuiG划水Colsrch开发者inkss摸鱼 dropmenu这个页面的标签将会在不久后重构 下拉菜单请将您的 Volantis 升级至 3.0 版本以上使用。 语法格式示例写法示例效果容器 &#123;% menu 前缀（可省略）::标题::后缀（可省略） %&#125;菜单内容&#123;% endmenu %&#125; 菜单内容 菜单项 &#123;% menuitem 文本::链接::图标 %&#125; 分割线 &#123;% menuitem hr %&#125; 子菜单 &#123;% submenu 嵌套菜单::图标 %&#125;菜单内容&#123;% endsubmenu %&#125;示例1 &#123;% menu 下拉菜单 %&#125;&#123;% menuitem 主题源码::https://github.com/volantis-x/hexo-theme-volantis/::fas fa-file-code %&#125;&#123;% menuitem 更新日志::https://github.com/volantis-x/hexo-theme-volantis/releases/::fas fa-clipboard-list %&#125;&#123;% menuitem hr %&#125;&#123;% submenu 有疑问？::fas fa-question-circle %&#125;&#123;% menuitem 看 FAQ::/faqs/ %&#125;&#123;% menuitem 看 本站源码::https://github.com/volantis-x/volantis-docs/ %&#125;&#123;% menuitem 提 Issue::https://github.com/volantis-x/hexo-theme-volantis/issues/ %&#125;&#123;% endsubmenu %&#125;&#123;% endmenu %&#125; 示例2 &#123;% menu 这个是::下拉菜单 %&#125;（同上）&#123;% endmenu %&#125; 示例3 &#123;% menu 这个是::下拉菜单::的示例效果。 %&#125;（同上）&#123;% endmenu %&#125;示例1 下拉菜单 主题源码 更新日志 有疑问？ 看 FAQ 看 本站源码 提 Issue 示例2 这个是 下拉菜单 主题源码 更新日志 有疑问？ 看 FAQ 看 本站源码 提 Issue 示例3 这个是 下拉菜单 主题源码 更新日志 有疑问？ 看 FAQ 看 本站源码 提 Issue 的示例效果。 tab此插件移植自 NexT #tabs 最后更新于 2.1 版本&#123;% tabs 页面内不重复的ID %&#125;&lt;!-- tab 栏目1 --&gt;内容&lt;!-- endtab --&gt;&lt;!-- tab 栏目2 --&gt;内容&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 演示效果栏目1栏目2。。。！！！ 上述示例的源码example:&#123;% tabs tab-id %&#125;&lt;!-- tab 栏目1 --&gt;。。。&lt;!-- endtab --&gt;&lt;!-- tab 栏目2 --&gt;！！！&lt;!-- endtab --&gt;&#123;% endtabs %&#125; folding最后更新于 5.0 版本&#123;% folding 参数（可选）::标题 %&#125;![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endfolding %&#125; 演示效果 查看图片测试 查看默认打开的折叠框 这是一个默认打开的折叠框。 查看代码测试 &#123;% folding green::查看代码测试 %&#125;查看代码测试&#123;% endfolding %&#125; 查看列表测试 hahahehe 查看嵌套测试 查看嵌套测试2 查看嵌套测试3 hahaha 上述示例的源码example:&#123;% folding 查看图片测试 %&#125;![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endfolding %&#125;&#123;% folding cyan open::查看默认打开的折叠框 %&#125;这是一个默认打开的折叠框。&#123;% endfolding %&#125;&#123;% folding green::查看代码测试 %&#125;&#123;% endfolding %&#125;&#123;% folding yellow::查看列表测试 %&#125;- haha- hehe&#123;% endfolding %&#125;&#123;% folding red::查看嵌套测试 %&#125;&#123;% folding blue::查看嵌套测试2 %&#125;&#123;% folding 查看嵌套测试3 %&#125;hahaha &lt;span&gt;&lt;img src=&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27; style=&#x27;height:24px&#x27;&gt;&lt;/span&gt;&#123;% endfolding %&#125;&#123;% endfolding %&#125;&#123;% endfolding %&#125; 可以支持的参数参数位置可以填写颜色和状态，多个参数用空格隔开。 颜色blue, cyan, green, yellow, red 状态状态填写 open 代表默认打开。 inlineimageInlineimage 标签是一种行内图片标签，可以用来在一段话中间插入表情。 本插件最后更新于 5.0 版本&#123;% inlineimage 图片链接::height=高度（可选） %&#125; 演示效果这是 一段话。 这又是 一段话。 上述示例的源码example:这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif::height=40px %&#125; 一段话。 可以支持的参数高度height=20px imageImage 标签是一种针对单个图片应用场景的标签，支持图片描述文字和指定宽度。 本插件最后更新于 5.0 版本&#123;% image 链接::width=宽度（可选）::height=高度（可选）::alt=描述（可选）::bg=占位颜色（可选） %&#125; 演示效果添加描述： 每天下课回宿舍的路，没有什么故事。 指定宽度： 指定宽度并添加描述： 每天下课回宿舍的路，没有什么故事。 设置占位背景色： 优化不同宽度浏览的观感 上述示例的源码example:添加描述：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg::alt=每天下课回宿舍的路，没有什么故事。 %&#125;指定宽度：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg::width=400px %&#125;指定宽度并添加描述：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg::width=400px::alt=每天下课回宿舍的路，没有什么故事。 %&#125;设置占位背景色：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg::width=400px::bg=#1D0C04::alt=优化不同宽度浏览的观感 %&#125; 可以支持的参数图片宽高度example:width=300px::height=32px 图片描述example:alt=图片描述 占位背景色example:bg=#f2f2f2 galleryGallery 标签是一种针对一组图片应用场景的标签。 本插件最后更新于 5.0 版本&#123;% gallery 参数::列数::分组 %&#125;![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg)&#123;% endgallery %&#125; 演示效果一行一个图片 图片描述 一行多个图片（不换行） 图片描述图片描述图片描述 多行多个图片（每行2～8个图片） 上述示例的源码一行一个图片 example.md:&#123;% gallery %&#125;![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endgallery %&#125; 一行多个图片（不换行） example.md:&#123;% gallery::::one %&#125;![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg)![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg)![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/00E0F0ED-9F1C-407A-9AA6-545649D919F4.jpeg)&#123;% endgallery %&#125; 多行多个图片（每行2～8个图片） example.md:&#123;% gallery stretch::6::two %&#125;![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/001.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/002.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/003.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/004.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/005.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/006.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/007.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/008.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/009.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/010.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/011.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/012.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/013.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/014.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/015.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/016.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/017.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/018.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/019.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/020.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/021.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/022.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/023.jpg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/024.jpg)&#123;% endgallery %&#125; 可以支持的参数对齐方向left::center::right 缩放stretch 列数::后面直接写列数，支持 2 ～ 8 列。设定列数之后就是「多行多图」布局，此时图片默认左对齐。为了避免图片大小不一，建议搭配 stretch 来时图片放大填充。 测试中 设定列数之后 不会产生 累积布局偏移; 没有设定列数 产生了累积布局偏移 分组相同内容的会被归档在一个分组中。 audio本插件最后更新于 2.4 版本&#123;% audio 音频链接 %&#125; 演示效果Your browser does not support the audio tag. 上述示例的源码example:&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125; video本插件最后更新于 5.0 版本&#123;% video 视频链接 %&#125; 演示效果100%宽度 Your browser does not support the video tag. 50%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. 25%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. 上述示例的源码100%宽度 example.md:&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125; 50%宽度 example.md:&#123;% videos::2 %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% endvideos %&#125; 25%宽度 example.md:&#123;% videos::4 %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% endvideos %&#125; 可以支持的参数对齐方向left::center::right 列数::后面直接写列数，支持 1 ～ 4 列。 frame这是一个能够将图片或者视频套入设备框架中的标签，可以用来更优雅地显示截图、录屏。 本插件最后更新于 5.0 版本&#123;% frame 框架名::img=图片链接::alt=图片描述（可选）::part=top/bottom（可选） %&#125;&#123;% frame 框架名::video=视频链接::part=top/bottom（可选） %&#125; &#123;% frame iphone11::img=https://bu.dusays.com/2020/09/28/baa33914a34ec.jpg::video=https://bu.dusays.com/2020/09/28/39db723f1e200.mp4::part=top %&#125; 在这个示例中同时出现了 img 和 video 那么它就是一个带有封面的视频，在视频加载完成之前会先显示视频封面。 设备框架目前支持的有： iphone11 如果您有以下其它设备框架图(svg)，欢迎 PR 兼容。 android, ipad, macbook, watch 剪裁通过设置 part=top 或者 part=bottom 来显示上半部分或者下半部分，否则将显示完整的框架及其中的图片&#x2F;视频。 aplayer主题对 APlayer 插件的样式进行了兼容。安装插件： npm i -S hexo-tag-aplayer 使用方法： hexo-tag-aplayerhttps://github.com/MoePlayer/hexo-tag-aplayer issuesissues 标签在5.0版本移除 被 sites标签 friends标签 contributors标签 替代 md在局部渲染外部md文件。 示例写法&#123;% md https://cdn.jsdelivr.net/gh/volantis-x/hexo-theme-volantis/README.md %&#125; md (()=>{ volantis.css(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/github-markdown-css/github-markdown.css\"); const contentEl = document.getElementById(\"md-33094469-90a6-2e41-879c-bb8e0cfa6df2\"); const loadMarkdown = (url) => { if (!window.fetch) { contentEl.innerHTML = 'Your browser outdated. Please use the latest version of Chrome or Firefox!您的浏览器版本过低，请使用最新版的 Chrome 或 Firefox 浏览器！'; } else { contentEl.innerHTML = 'Loading ... | 加载中。。。'; fetch(url, { method: \"GET\" }) .then((resp) => { return Promise.all([ resp.ok, resp.status, resp.text(), resp.headers, ]); }) .then(([ok, status, data, headers]) => { if (ok) { return { ok, status, data, headers, }; } else { throw new Error(JSON.stringify(json.error)); } }) .then((resp) => { let data = marked.parse(resp.data); contentEl.innerHTML = data; }) .catch((error) => { console.log(error); contentEl.innerHTML = 'There was a problem loading the file!加载文件时出现问题！'; }); }; }; volantis.js(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/marked/marked.min.js\").then(()=>{ loadMarkdown(\"https://cdn.jsdelivr.net/gh/volantis-x/hexo-theme-volantis/README.md?t=\" + new Date().getTime()); })})(); swiper轮播标签默认一张图片是 50% 宽度，通过设置 width:min 设置为 25% 宽度，width:max 设置为 100% 宽度。 最大图片宽度 &#123;% swiper width:max %&#125;![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot11.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot12.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot13.png)&#123;% endswiper %&#125; 最小图片宽度 &#123;% swiper width:min %&#125;![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot01.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot02.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot03.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot04.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot05.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot06.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot07.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot08.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot09.png)![](https://cdn.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot10.png)&#123;% endswiper %&#125; 友链标签您可以在任何位置插入友链，支持静态数据和动态数据，静态数据需要写在数据文件中： blog/source/_data/friends.ymlvolantis_developer: title: description: items: - title: xaoxuu url: https://github.com/xaoxuu avatar: https://avatars.githubusercontent.com/u/16400144?s=60&amp;v=4 - title: MHuiG url: https://github.com/MHuiG avatar: https://avatars.githubusercontent.com/u/38281581?s=60&amp;v=4 - title: inkss url: https://github.com/inkss avatar: https://avatars.githubusercontent.com/u/31947043?s=60&amp;v=4 - title: Colsrch url: https://github.com/Colsrch avatar: https://avatars.githubusercontent.com/u/58458181?s=60&amp;v=4 - title: Drew233 url: https://github.com/Drew233 avatar: https://avatars.githubusercontent.com/u/47592224?s=60&amp;v=4 - title: Linhk1606 url: https://github.com/Linhk1606 avatar: https://avatars.githubusercontent.com/u/50829219?s=60&amp;v=4 - title: W4J1e url: https://github.com/W4J1e avatar: https://avatars.githubusercontent.com/u/74824162?s=60&amp;v=4community_builder: title: description: items: - title: xaoxuu url: https://github.com/xaoxuu avatar: https://avatars.githubusercontent.com/u/16400144?s=60&amp;v=4 - title: MHuiG url: https://github.com/MHuiG avatar: https://avatars.githubusercontent.com/u/38281581?s=60&amp;v=4 - title: Colsrch url: https://github.com/Colsrch avatar: https://avatars.githubusercontent.com/u/58458181?s=60&amp;v=4 - title: penndu url: https://github.com/penndu avatar: https://avatars.githubusercontent.com/u/46226528?s=60&amp;v=4 - title: heson525 url: https://github.com/heson525 avatar: https://avatars.githubusercontent.com/u/32234343?s=60&amp;v=4 - title: W4J1e url: https://github.com/W4J1e avatar: https://avatars.githubusercontent.com/u/74824162?s=60&amp;v=4 - title: luosiwei-cmd url: https://github.com/luosiwei-cmd avatar: https://avatars.githubusercontent.com/u/61175380?s=60&amp;v=4groupGitHub: title: 来自 GitHub 的朋友 description: &#x27;以下友链通过 [GitHub Issue](https://github.com/xaoxuu/friends/issues/) 提交，按 issue 最后更新时间排序：&#x27; api: https://issues-api.vercel.app repo: xaoxuu/friends 标题和描述都支持 md 格式，需要写在引号中。如果指定了 api 和 repo 字段，则从 issues 中取第一个 json 代码块数据作为友链。 写法如下&#123;% friends %&#125; 数据按组筛选友链支持分组（白名单模式和黑名单模式）显示： 写法如下// 显示 volantis_developer&#123;% friends only:volantis_developer %&#125;// 显示 volantis_developer 和 community_builder&#123;% friends only:volantis_developer,community_builder %&#125;// 除了 community_builder 别的都显示&#123;% friends not:community_builder %&#125; friends only:volantis_developer xaoxuuMHuiGinkssColsrchDrew233Linhk1606W4J1eericcloseheson525CRainyDayFlexistonMicDZzhaohaihaolixiang810WillyChen123ic3evi1pennduPHIKN1GHTzsStrikecode004AcceptedqinxsXuxuGoodTRHXcofmlunhui1994gyl-coderfi6 实现动态友链可以加载来自 issues 的友链数据，除了需要在 _data/friends.yml 中指定 api 和 repo 外，还需要做一下几件事： 从 xaoxuu&#x2F;issues-api 作为模板克隆或者 fork 仓库，然后提交一个 issue 进行测试，不出意外的话，仓库中已经配置好了 issue 模板，只需要在模板中指定的位置填写信息就可以了。 提交完 issue 一分钟左右，如果仓库中出现了 output 分支提交，可以点击查看一下文件内容是否已经包含了刚刚提交的 issue 中的数据，如果包含，那么再次回到前端页面刷新就可以看到来自 issue 的友链数据了。 关于自建&amp;nbsp;Vercel&amp;nbsp;API 如果您想使用自己的 api，请把您刚创建的仓库导入到 Vercel 项目，详见 小冰博客 的教程。 特别感谢小冰博客通过 Vercel 进行加速的方案，解决了原本直接请求 GitHub API 速度过慢的问题。 只显示动态数据如果您不想创建 friends.yml 来设置任何静态数据，可以在标签中设置 repo 来只显示动态数据： &#123;% friends repo:xaoxuu/friends %&#125; 当然，如果您自己部署了 API 接口，可以指定： &#123;% friends repo:xaoxuu/friends api:https://issues-api.vercel.app %&#125; 网站卡片标签网站卡片可以显示网站截图、logo、标题、描述，使用方法和友链标签一模一样，唯一的区别是数据文件名称为 sites.yml，可以和友链数据混用，通过分组过滤实现不一样的效果。 示例写法&#123;% sites only:test_demo %&#125; sites only:test_demo volantis-x.js.orgTest Site For Development Hexo 通用标签在文章中使用 &lt;!-- more --&gt;，那么 &lt;!-- more --&gt; 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。详见 Hexo 官方文档： Hexo 官方文档 #标签插件https://hexo.io/zh-cn/docs/tag-plugins"}],"posts":[{"title":"HashMap一些误区","slug":"Java/basics/HashMap","date":"2023-03-23T10:05:05.000Z","updated":"2023-03-23T10:26:18.093Z","comments":true,"path":"Java/basics/HashMap/","link":"","permalink":"http://zqyu.top/Java/basics/HashMap/","excerpt":"1.8 HashMap一些误区 待更新","text":"1.8 HashMap一些误区 待更新 触发treeifyBin方法情况（java.util.HashMap#treeifyBin） 在进行插入元素时，遍历链表进行尾插入，紧接着会判断当前链表长度是不是大于TREEIFY_THRESHOLD（8），条件成立则进入treeifyBin方法尝试转为红黑树。但是该方法内部还会判断当前数据长度是否小于MIN_TREEIFY_CAPACITY（64），小于则扩容，大于则转红黑树 /** * Implements Map.put and related methods. * * @param hash hash for key * @param key the key * @param value the value to put * @param onlyIfAbsent if true, don&#x27;t change existing value * @param evict if false, the table is in creation mode. * @return previous value, or null if none */final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else &#123; Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else &#123; for (int binCount = 0; ; ++binCount) &#123; if ((e = p.next) == null) &#123; p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; &#125; &#125; if (e != null) &#123; // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; &#125; &#125; ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null;&#125; static final int TREEIFY_THRESHOLD = 8;for (int binCount = 0; ; ++binCount) &#123; if ((e = p.next) == null) &#123; p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e;&#125; static final int MIN_TREEIFY_CAPACITY = 64;/** * Replaces all linked nodes in bin at index for given hash unless * table is too small, in which case resizes instead. */final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123; int n, index; Node&lt;K,V&gt; e; if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY) resize(); else if ((e = tab[index = (n - 1) &amp; hash]) != null) &#123; TreeNode&lt;K,V&gt; hd = null, tl = null; do &#123; TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null); if (tl == null) hd = p; else &#123; p.prev = tl; tl.next = p; &#125; tl = p; &#125; while ((e = e.next) != null); if ((tab[index] = hd) != null) hd.treeify(tab); &#125;&#125; 总结 并不是链表长度超过默认值8就会转换为红黑树，还会判断数组是否会大于64。小于则扩容、大于则转换红黑树。 向博主反馈问题","categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"}],"tags":[{"name":"Map","slug":"map","permalink":"http://zqyu.top/tags/map/"}]},{"title":"MySql","slug":"MySQL/update语句导致行锁或者表锁","date":"2022-09-17T14:10:16.000Z","updated":"2022-09-17T15:29:33.406Z","comments":true,"path":"MySQL/update语句导致行锁或者表锁/","link":"","permalink":"http://zqyu.top/MySQL/update%E8%AF%AD%E5%8F%A5%E5%AF%BC%E8%87%B4%E8%A1%8C%E9%94%81%E6%88%96%E8%80%85%E8%A1%A8%E9%94%81/","excerpt":"关于MySQL使用update语句时where条件使用不恰当导致表锁","text":"关于MySQL使用update语句时where条件使用不恰当导致表锁 结论一（where语句后面没有order by排序） 当where条件使用上索引，则进行行锁 使用对应索引列进行遍历对比，找到对应索引记录加锁 反之则进行表锁 当where条件没有可用的索引列，那只能通过主键索引逐一遍历比较 遍历过的索引项都会被加上next-key锁（记录锁 + 间隙锁）（对记录加锁的基本单位时next-key锁），直到找到符合条件为止，因此后面的索引项不会被锁住，并不是完全的全表锁住 结论二（where语句后面有order by排序） 当where条件和order by都分别有单列索引时 不在是先根据where条件查询出来然后再排序，而是先根据order by字段的索引找出记录 若是order by desc，则在索引最右侧叶子节点倒序批量取出记录，再根据查询出的id回表查询出完整记录，根据where条件判断是否符合 因为索引是按照时间顺序从左到右插入，因此MySQL优化器觉得先根据order by索引树倒序批量取出数据会比根据where条件筛选出数据再排序快得多 认为如果排序不用索引，将会是file sort，又不能where和order by两个索引都用上，所以选择用order by的索引 为什么不能用上两个索引？ 每个索引在数据库中都是一个索引树，对于主键索引，其节点存储了只想实际数据的文件指针，查询其原理就是在索引树上遍历，获得叶子节点的文件指针，取出对应数据；而唯一索引等，叶子节点存放主键id，根据主键id到主键索引上查询到对应的叶子节点，取出对应的数据 当MySQL使用一个索引之后，还要再使用另一个索引，则会得到两组集合，并且要给这两个集合取交集才得到结果，当数据量较大时，复杂度高，效率低，即用多个索引不仅没用，还是得效率更低 当where条件和order by是组合索引时 根据where条件在组合索引遍历查询，得到的数据就是有序的（从左往右遍历即是正序，反之倒序） https://zhuanlan.zhihu.com/p/356463167 为什么很多人在update语句假limit 1？ 避免条件错误导致批量更新 向博主反馈问题","categories":[{"name":"MySql","slug":"mysql","permalink":"http://zqyu.top/categories/mysql/"}],"tags":[{"name":"MySql","slug":"mysql","permalink":"http://zqyu.top/tags/mysql/"}]},{"title":"Spring Bean的this调用导致其注解失效原因","slug":"Spring/Spring Bean的this调用导致其注解失效原因","date":"2022-08-02T07:46:27.000Z","updated":"2022-08-02T09:33:26.580Z","comments":true,"path":"Spring/Spring Bean的this调用导致其注解失效原因/","link":"","permalink":"http://zqyu.top/Spring/Spring%20Bean%E7%9A%84this%E8%B0%83%E7%94%A8%E5%AF%BC%E8%87%B4%E5%85%B6%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0/","excerpt":"Spring Bean的this调用导致其注解失效原因","text":"Spring Bean的this调用导致其注解失效原因 向博主反馈问题","categories":[],"tags":[]},{"title":"第四次面试复盘","slug":"interview/第四次面试复盘","date":"2020-07-31T02:38:40.000Z","updated":"2020-07-31T03:41:46.000Z","comments":true,"path":"interview/第四次面试复盘/","link":"","permalink":"http://zqyu.top/interview/%E7%AC%AC%E5%9B%9B%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/","excerpt":"第四次面试复盘","text":"第四次面试复盘 第四次面试是在外面的世界，xxx公司（好像是培训公司，但是没和我说培训的事情） 去到公司门口，各种调查，粤康码、身份证什么什么的（毕竟是珠江新城的某一栋大楼） 上到公司，又需要填写资料 去到接待室那边填写，填写完成后和简历一起交给前台小姐姐（前台小姐姐都那么漂亮的嘛），接着等待面试 和我一起来的那个人进去20来分钟，才到我.... 别人面试都有小房间，就我在外面面试.... 面试开始.. 自我介绍 问我最近情况、住哪、下半年还要不要回校上课、学校的课程主要是学些什么、学校有没有实训什么的、是学校强制的还是自愿实训的、以后有什么打算（为后面洗脑培训做准备？） 接着，SpringMVC流程，大概说一下（这个转变我有点转不过来，懵了一会） SpringMVC常用的注解 SpringBoot自动配置原理 Mybatis二级缓存 MySQL的事务（好像忘记这个问题了...） 提示事务？？（听得不太清楚...） 我直接打断面试官，说我SpringBoot、Mybatis目前的阶段只是会用，还没到了解其原理的地步，但是我对Spring有所了解，尤其是IOC和AOP 接下来面试官没问我Spring的任何问题 问到了我Redis了解过一点没有 那么如何实现Redis的读写分离？ 我..... 你知道有哪几种算法？ 学过数据结构是吧，有哪几种结构？ 讲讲线程有哪几种状态？ 讲讲位于运算的过程？ 就以上这些问题，比我早进去20来分钟的都没出来，我又是面试时间最短的，太难了..... 并且面试官也是女的，至于漂不漂亮，和前台小姐姐和差得远呢... 面试总结：还是需要对SpringBoot、Mybatis、Redis等技术的原理深入了解 向博主反馈问题","categories":[{"name":"面试","slug":"面试","permalink":"http://zqyu.top/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[]},{"title":"第三次面试复盘","slug":"interview/第三次面试复盘","date":"2020-07-29T14:23:41.000Z","updated":"2020-07-31T03:41:38.000Z","comments":true,"path":"interview/第三次面试复盘/","link":"","permalink":"http://zqyu.top/interview/%E7%AC%AC%E4%B8%89%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/","excerpt":"第三次面试复盘","text":"第三次面试复盘 第三次面试是在外面的世界.....，xxx公司 去到公司，一抬头就看到隔壁是培训机构，我呃......... 走进公司前台，日常签个名，然后给了份面试题做，优势笔试....还全部要手写理论，回忆有点不全面，忘了拍下来.....（共有12道题目，前台小姐姐说能写多少是多少） String、StringBuffer和StringBuilder三者之间的区别 List、Set与Map的区别 servlet生命周期 Spring的AOP原理 get、post区别 左连接查询（left join）、自连接查询（inner join）、右连接查询（right join），谈谈你对这三种连接的理解 Mybatis调用mapper接口需要注意什么?（记得不太清除） forward和redirect之间的区别 BeanFactory与ApplicationContext的区别 servlet与jsp的关系 &#x2F; 区别 画出SpringMVC流程图 SpringBoot的starter有什么作用，作用在哪里？有哪些常用的starter？ 写完笔试，拿出简历一起给前台小姐姐，就开始漫长的等待..... 没错，又是我最后一个。作为最后一个面试的我，表示很淡定 面试官的问题如下，想起多少是多少...... SpringBoot自动配置的原理？ SpringBoot的starter有什么作用？ 接下来我直接说我SpringBoot只是会用这种程度... Mybatis？（我直接说不会....）估计是问二级缓存问题 BeanFactory与ApplicationContext区别！ 讲讲AOP原理？ 注意（SpringMVC没问到我） ConcurrentHashMap与HashMap的区别？ 原来上一个是我听错了....是HashTable与HasMap区别？ 讲讲你所理解的HashMap！ 当我说到加载因子是0.75时，面试官打断提问，为什么是0.75？ 说一下MySQL有哪两种常用的引擎？ 那它们（MyISAM、InnoDB）分别有什么区别？ 问到这里就结束啦，是不是感觉很简单.... 注意，我回答问题的过程中，面试官曾多次打断我的回答（只有两种情况：一是回答的太糟糕了，面试官都听不下去、二是你回答到了面试官的点上，让面试官get到你会了这个问题） 回答完毕，出来等面试的情况 面试官对我的面试给下了如下的结果：Java基础扎实、对Spring源码有所了解、SpringBoot会用，但是不了解其原理、MySQL基础扎实（这个我是我自己觉得的【狗头】） 最后给项目回家实现，一天后提交项目（我放弃了....原因不是做不出...很扎心） 设计员工表（Employee）有以下字段 ​ id，年龄，姓名，性别，地址 注册git账号（coding，码云都可以）： \\1. 手动搭建SSM框架，不能使用springboot搭建，需要手动原生spring整合。 注意：需要用Maven进行管理、尽量遵循resultful开发风格 （需要加入统一异常处理和事务管理） 整合完成后运行，找错，运行无问题后，将运行截图在world文档中，完成后上传一个git。 \\2. 完成员工增删改查开发，返回json数据即可。需要在添加员工和修改员工加入springmvc校验处理，校验字段是否合法，尽量遵循resultful开发风格。运行无问题后，将运行成功截图在word文档中，完成后上传一次git。 \\3. 编写发送短信验证接口，可以对接（阿里大于，互亿无线等短信平台），短信发送无问题后，将运行成功截图到word文档中，完成后上传一次git。 \\4. 设计一个单点登录系统，实现手机验证码登录和找回密码，登录信息使用jwt无状态存储。 \\5. 对接蚂蚁支付沙箱环境，对接完成后使用springcloud搭建字符微服务，在支付异步通知使用zookeeper实现分布式锁。 \\6. 将支付微服务项目发布到linux服务器中，可以在虚拟机安装centos7，可以直接使用linux发布也可以使用docker，将发布成功运行成功截图到word文档中。 面试总结：基础虽然扎实，但是对框架的原理不是很理解，需要加深这方面的知识！！！ 向博主反馈问题","categories":[{"name":"面试","slug":"面试","permalink":"http://zqyu.top/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[]},{"title":"第二次面试复盘","slug":"interview/第二次面试复盘","date":"2020-07-29T02:20:47.000Z","updated":"2020-07-31T03:41:26.000Z","comments":true,"path":"interview/第二次面试复盘/","link":"","permalink":"http://zqyu.top/interview/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/","excerpt":"第二次面试复盘","text":"第二次面试复盘 第二次面试是微信上线以及到公司面试.....，xxx公司 这个简单啊，有个妹子内推我去面试，首先要在微信上线面试摸一下我的底 接下来我直接复制微信上的记录吧，都是些经典的问题.... 你好，技术面试官吴总会安排时间与你交流@吴珊 好的，麻烦你们了 @小猪爱生活 先介绍一下自己擅长的开发领域是什么吧 小猪爱生活:我擅长的开发领域是Java后端开发，目前用的框架springboot以及SSM，对于springboot能够熟练运用，熟练spring的ioc，aop原理，springmvc执行流程，大概是这个样子 使用springboot框架的项目如何在linux上运行？ 前台运行：java -jar jar包 如果要加上一些jvm的参数在后面追加，但是我还了解到那个程度 后台运行：nohup java -jar jar包 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; 嗯，讲一个你开发过的项目，其中设计到的技术，难点，对难点的解决方法 项目记录日志吧，我需要将登陆的日志和操作的日志分开来记录，并且具体操作的方法都是以power开头的，power开头的方法能够使用aop统一来管理权限 但是有个功能，修改用户信息，这个功能按道理来说是需要权限认证的 但是有一种场景，用户修改个人信息时，也会调用到这个api，如果这个用户是普通用户，则会被权限拦截，无法进行修改操作 我不想再新写一个方法专门用来进行 用户的信息修改 所以只能将这个修改用户信息的方法从aop抽出来，单独判断权限等问题 所以这个修改用户信息的方法不是以 power 开头，当记录权限的时候，没办法一条切入点表达式 切完整个操作的方法，最后采用自定义注解解决 还有就是，部门的信息时采用树型的结构展示，所以存储再数据库时是树型的数据，我采用的是直接记录父节点的方式，这样的话，需要递归查询出来，当树的深度 达到一定程度时，查询效率变慢 这也是近期准备优化项目的一个问题，性能 以为部门插入少，查询多，以空间换时间的方法来优化 这个问题的话采用，采用树的前序遍历，存储在数据库上 截一段你认为写的最好Java的代码给我看看 List&lt;?&gt; list = null;Long total = null;// 登陆日志的if (log instanceof LogLogin) &#123; list = logMapper.findLogLoginByPage(page, size, (LogLogin) log); total = logMapper.getLogLoginTotal((LogLogin) log);&#125;// 操作日志的if (log instanceof LogOperating) &#123; list = logMapper.findLogOperatingByPage(page, size, (LogOperating) log); total = logMapper.getLogOperatingTotal((LogOperating) log);&#125;if (list == null || list.size() == 0 || total == null) &#123; return ResultBean.error(&quot;查询不到日志信息！&quot;);&#125;return ResultBean.ok(new ResultPageBean(list, total)); 虽然代码蛮简单，但是一个方法实现了两种不同的查询，利用 instanceof 关键字来判断具体执行哪种操作，这个是我看到spring源码那些后置处理器学到的，spring不同的后置处理器处理不同的事物 ok,你有什么需要问的吗? 本次技术面试结束，感谢你的参加，后续将由HR交流，本群解散。 接着我还没问面试官问题就被踢出了群.... 面试总结：这个没什么好总结的，基本上问我项目，没问什么技术问题。 向博主反馈问题","categories":[{"name":"面试","slug":"面试","permalink":"http://zqyu.top/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[]},{"title":"第一次面试复盘","slug":"interview/第一次面试复盘","date":"2020-07-28T15:23:52.000Z","updated":"2020-07-31T03:41:16.000Z","comments":true,"path":"interview/第一次面试复盘/","link":"","permalink":"http://zqyu.top/interview/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/","excerpt":"第一次面试复盘","text":"第一次面试复盘 第一次面试是在学校的图书馆，xxx公司 首先去到那里什么都不管，先笔试 笔试的的题目吧，记得不太清楚了.....难顶 类初始化时，构造器代码块、局部代码块、静态代码块的执行顺序，在博客的另一篇文章不再过多细谈。 StringBuffer与StringBuilder的区别，在博客的另一篇文章不再过多细谈。 new String(&quot;&quot;)与String str &#x3D; &quot;&quot;有什么区别：前者new String是不管常量池有没有，都是new一个、后者在常量池中找有没有这个对象，有就直接指向这个对象，没有就new一个 new StringBuilder(&quot;hello&quot;).append(&quot;world&quot;) &#x3D;&#x3D; String str &#x3D; &quot;helloworld&quot; ? true OR false 选择题基本就这些比较重要吧..... 做完笔试坐等面试，因为我是最后一个面试Java后端的，等着就比较着急。看着在我之前的大佬，面试时间是真的久，顿时很慌 仿佛过了一万年，终于到我了，拿着简历慌慌张张的走进去。面试官：你先自我介绍下....... 我：..........难顶 我的自我介绍：我是谁，来自于哪个学校哪个专业，目前有两个项目经验。接着就详细的介绍我的那两个项目 在自我介绍期间，被打断几次，然后思路发生了微妙的变化....就...莫名其妙的我就介绍完项目了.......... 接着面试官开始讲话，咳咳：请问你这个部门管理的树形结构是如何实现的？能不能把它的表结构写出来？然后就给我一张纸一支笔，我......发生了什么事情... 既然都叫写了，总不能说不会吧，硬着头皮写出来。 接着问这个功能是怎么实现的，能不能说一下过程 我就巴拉巴拉巴拉...表结构就是指存储父节点的id，然后通过递归将它们查询出来 面试官：如果你这个树的深度是20层或者更多层的话，那要递归20次才能查询出来啊，效率很低啊，能不能说一说这个效率低在哪里，时间都浪费在哪里 我...... 面试官：那你针对这个问题，有没有什么解决方案？ 我：没有...... 面试官：那你现在能不能想出一个方案给我？ 我....... 面试官：那我问问你其他问题吧，你们学过数据结构的是吧？如果有一个长度为20的数组，需要找出16这个值，你会怎么做？ 我：那这个数组是排好序的吗？比如是大到小或者是小到大？ 面试官：大概想一秒钟，说是排好序的 那我接着说，用二分法查询吧 面试官：那它的时间复杂度是多少？ 我：log.....（二分法的时间复杂度是 logN ） 面试官：好了，我大概了解你的情况了，那就先这样吧，到时候我们讨论下回告诉你面试结果的 第一次面试就是这样，没错，问的问题很少，面试的时间也短，问到的都是我的弱项，我没办法接面试官的话说下去，好菜啊.... 第一次面试总结：自己需要加强MySQL数据库性能优化相关的知识、然后就是面试官问的问题，要get到面试官问的是什么场景下的问题，如果场景不清楚，可继续询问面试官是哪种场景，不同的场景的解决办法是不同的。eg：部门管理用到的是树形结构，并且不经常增删改的，但坚持查询，这个时候就可需要优化查询，以空间换取时间来解决该问题。采用闭包表：https://www.biaodianfu.com/closure-table.html 向博主反馈问题","categories":[{"name":"面试","slug":"面试","permalink":"http://zqyu.top/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[]},{"title":"HandlerAdapter","slug":"SpringMVC/HandlerAdapter","date":"2020-07-05T13:00:16.000Z","updated":"2020-07-05T14:43:40.000Z","comments":true,"path":"SpringMVC/HandlerAdapter/","link":"","permalink":"http://zqyu.top/SpringMVC/HandlerAdapter/","excerpt":"HandlerAdapter","text":"HandlerAdapter ​ HandlerMapping将方法映射到URL，因此DispatcherServlet知道特定请求应该调用哪个方法。然后DispatcherServlet使用HandlerAdapter来调用该方法。 ​ SpringMVC通过HandlerMapping获取到可以处理的handler，这些handler的类型各不相同，对请求的预处理，参数获取都不相同，最简单的做法是根据不同的handler类型，做一个分支处理，不同的handler编写不同的代码。 ​ 这样的问题是很明显的，分支判断复杂，代码庞大，不符合单一职责原则。如果要增加一种handler类型，需要修改代码增加分支处理，违反了开闭原则。DispatcherServelt与多个handler发生了交互，违反迪米特法则。 ​ 而使用适配器模式，就可以很好的解决这个问题： ​ 不直接对handler进行处理，而是将handler交给适配器HandlerAdapter去处理，这样DispatcherServlet交互的类就只剩下一个接口，HandlerAdapter，符合迪米特法则，尽可能少的与其他类发生交互； ​ 将handler交给HandlerAdapter处理后，不同类型的handler被对应类型的HandlerAdapter处理，每个HandlerAdapter都只完成单一的handler处理，符合单一职责原则； ​ 如果需要新增一个类型的handler，只需要新增对应类型的HandlerAdapter就可以处理，无需修改原有代码，符合开闭原则。 ​ 这样，不同的handler的不同处理方式，就在HandlerAdapter中得到了适配，对于DispatcherServlet来讲，只需要统一的调用HandlerAdapter的handle()方法就可以了，无需关注不同handler的处理细节。 设计模式的原则 1.单一职责原则 一个类只完成单一的功能，粒度越小越好 ​ 2.开闭原则​ 对扩展开放，对修改关闭。​ 一个类开发完成后，应当可以通过扩展的方式实现新的功能，而不是通过修改原有类来达到目的。 ​ 3.里氏替换原则​ 所有引用父类的地方都可以透明的使用其子类 ​ 4.依赖倒置原则​ 抽象不应该依赖于细节，细节应该依赖于抽象。​ 应该针对接口或抽象类编程，而不是针对具体的实现编程 ​ 5.接口隔离原则​ 接口的划分应该更细致，使用多个功能单一的接口，而不是将所有的功能放到一个接口中实现，客户端不应该去依赖它所不需要的接口方法。 ​ 6.迪米特法则​ 一个类应尽可能少的与其他类进行交互。降低耦合。 向博主反馈问题","categories":[{"name":"SpringMVC","slug":"springmvc","permalink":"http://zqyu.top/categories/springmvc/"}],"tags":[{"name":"Adapter","slug":"adapter","permalink":"http://zqyu.top/tags/adapter/"}]},{"title":"SpringMVC流程","slug":"SpringMVC/SpringMVC流程","date":"2020-07-05T13:00:16.000Z","updated":"2020-07-08T03:30:02.000Z","comments":true,"path":"SpringMVC/SpringMVC流程/","link":"","permalink":"http://zqyu.top/SpringMVC/SpringMVC%E6%B5%81%E7%A8%8B/","excerpt":"SpringMVC执行流程","text":"SpringMVC执行流程 &lt;!--SpringMVC用到的jar包--&gt; &lt;!--spring-web提供监听器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;5.2.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;5.2.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; SpringMVC执行流程 DispatcherServlet表示前置控制器，是整个SpringMVC对的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。 当请求进来，执行 DispatcherServlet.doDispatch(HttpServletRequest request，HttpServletResponse response)方法，列举一些比较重要的方法 /** * Process the actual dispatching to the handler. * &lt;p&gt;The handler will be obtained by applying the servlet&#x27;s HandlerMappings in order. * The HandlerAdapter will be obtained by querying the servlet&#x27;s installed HandlerAdapters * to find the first that supports the handler class. * &lt;p&gt;All HTTP methods are handled by this method. It&#x27;s up to HandlerAdapters or handlers * themselves to decide which methods are acceptable. * @param request current HTTP request * @param response current HTTP response * @throws Exception in case of any kind of processing failure */ protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; HandlerExecutionChain mappedHandler = null; ModelAndView mv = null; .... // Determine handler for the current request. 获取handler，返回HandlerExecutionChain执行链 mappedHandler = getHandler(processedRequest); .... // Determine handler adapter for the current request. 获取适配器 HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); .... // Actually invoke the handler. 根据适配器，执行目标方法 mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); .... &#125; HandlerMapping为处理器映射器，由DispathcerServlet调用getHandler(processedRequest)方法，最终返回HandlerExecutionChain执行链，里面包括处理器handler，拦截器filter等等 HandlerMapping是根据请求URl查找Handler，SpringMVC默认的HandlerMapping在文章后面 若寻找到handler，将其封装到HandlerExecutionChain返回 若寻找不到handler，看是否配置了 &lt;mvc:default-servlet-handler &#x2F;&gt; 标签，若没配置，则直接返回404，并且控制台打印：WARN ework.web.servlet.PageNotFound - No mapping for GET &#x2F;account&#x2F;test 若配置了&lt;mvc:default-servlet-handler &#x2F;&gt; 标签，则使用默认的HandlerMapping：**SimpleUrlHandlerMapping **，返回HandlerExecutionChain执行链，里面的handler为：org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler。接着会去寻找静态资源，若找不到就404 接下来确定当前请求的处理程序适配器，根据handler去确定适配器，getHandlerAdapter(mappedHandler.getHandler())，默认的HandlerMapping在文章后面 到执行处理请求的方法：ha.handle 先执行拦截器的preHandler方法 调用目标Handler的目标方法得到返回值ModelAndView对象，反射执行方法看是否存在异常 如果存在异常，则由HandlerExceptionResolver组件处理异常，得到新的ModelAndView对象 最终由试图解析器ViewResolver组件解析ModelAndView对象得到View 渲染视图 调用拦截器的afterCompletion方法 调用拦截器的postHandler方法 SpringMVC 默认的映射器以及适配器默认的处理器映射器HandlerMapping： org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping org.springframework.web.servlet.handler.SimpleUrlHandlerMapping（注意: 该映射器HandlerMapping是配置 &lt;mvc:default-servlet-handler &#x2F;&gt; 标签, 返回默认的DefaultServletHttpRequestHandler, 如果DispatcherServlet没用找到请求对应的处理器, 则会返回这个handler, 这个handler可以对静态资源进行处理） 默认的处理器适配器Adapter，主要的作用是执行处理请求的方法： org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter 向博主反馈问题","categories":[{"name":"SpringMVC","slug":"springmvc","permalink":"http://zqyu.top/categories/springmvc/"}],"tags":[]},{"title":"快速返回上次查看代码的位置","slug":"idea/快速返回上次查看代码的位置","date":"2020-07-03T05:39:16.000Z","updated":"2020-07-03T14:20:54.000Z","comments":true,"path":"idea/快速返回上次查看代码的位置/","link":"","permalink":"http://zqyu.top/idea/%E5%BF%AB%E9%80%9F%E8%BF%94%E5%9B%9E%E4%B8%8A%E6%AC%A1%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E4%BD%8D%E7%BD%AE/","excerpt":"快速返回上次查看代码的位置","text":"快速返回上次查看代码的位置 快速返回上次查看代码的位置在IDEA中可以使用快捷键返回，默认是：ctrl + alt + 方向键 向博主反馈问题","categories":[{"name":"idea","slug":"idea","permalink":"http://zqyu.top/categories/idea/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://zqyu.top/tags/idea/"}]},{"title":"aop","slug":"Spring/aop","date":"2020-07-02T06:35:37.000Z","updated":"2020-07-02T06:45:44.000Z","comments":true,"path":"Spring/aop/","link":"","permalink":"http://zqyu.top/Spring/aop/","excerpt":"aop定义及源码","text":"aop定义及源码 什么是aop？​ 与00P对比，面向切面,传统的00P开发中的代码逻辑是至上而下的,在这些至上而下的过程中会产生一些横切性的问题 ,这些横切性的问题和我们的主业务逻辑关系不大,会散落在代码的各个地方,造成难以维护, AOP的编程思想就是把业务逻辑和横切的问题进行分离，从而达到解耦的目的，使代码的重用性和开发效率高。 应用场景 日志记录 权限认证 效率检查 事务管理 ............ 横切性问题：相对于oop而言，一些跟业务逻辑没有关系，会散落再业务逻辑的各个地方这些代码，这些会造成代码很难维护。 oop跟多关注的是业务逻辑的处理，而aop关注的是切面的处理 向博主反馈问题","categories":[{"name":"Spring","slug":"spring","permalink":"http://zqyu.top/categories/spring/"}],"tags":[{"name":"aop","slug":"aop","permalink":"http://zqyu.top/tags/aop/"}]},{"title":"bean生命周期源码","slug":"Spring/bean生命周期","date":"2020-07-01T14:20:27.000Z","updated":"2020-07-08T04:24:10.000Z","comments":true,"path":"Spring/bean生命周期/","link":"","permalink":"http://zqyu.top/Spring/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","excerpt":"bean生命周期源码","text":"bean生命周期源码 向博主反馈问题","categories":[{"name":"Spring","slug":"spring","permalink":"http://zqyu.top/categories/spring/"}],"tags":[]},{"title":"类的实例化顺序","slug":"Java/basics/class_instantiation","date":"2020-06-30T13:40:38.000Z","updated":"2020-06-30T13:50:38.000Z","comments":true,"path":"Java/basics/class_instantiation/","link":"","permalink":"http://zqyu.top/Java/basics/class_instantiation/","excerpt":"类的实例化顺序？","text":"类的实例化顺序？ java类的实例化顺序 1． 父类静态成员和静态初始化块 ，按在代码中出现的顺序依次执行 2． 子类静态成员和静态初始化块 ，按在代码中出现的顺序依次执行 3． 父类实例成员和实例初始化块 ，按在代码中出现的顺序依次执行 4． 父类构造方法 5． 子类实例成员和实例初始化块 ，按在代码中出现的顺序依次执行 6． 子类构造方法 总结：父类静态成员和静态代码块-&gt;子类静态成员和静态代码块-&gt;父类非静态成员和非静态代码块-&gt;父类构造方法-&gt;子类非静态成员和非静态代码块-&gt;子类构造方法 向博主反馈问题","categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"}],"tags":[{"name":"class","slug":"class","permalink":"http://zqyu.top/tags/class/"}]},{"title":"Socket通讯原理","slug":"计算机网络基础/Socket","date":"2020-06-30T09:16:53.000Z","updated":"2020-06-30T12:09:02.000Z","comments":true,"path":"计算机网络基础/Socket/","link":"","permalink":"http://zqyu.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/Socket/","excerpt":"什么是TCP&#x2F;IP、UDP？ Socket在哪里？ Socket是什么？","text":"什么是TCP&#x2F;IP、UDP？ Socket在哪里？ Socket是什么？ 什么是TCP&#x2F;IP、UDP？​ TCP&#x2F;IP（Transmission Control Protocol&#x2F;Internet Protocol）即传输控制协议&#x2F;网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP&#x2F;IP协议族中的一种。 ​ 这里有一张图，表明了这些协议的关系，如如下图1所示： ​ TCP&#x2F;IP协议族包括运输层、网络层、链路层。现在你知道TCP&#x2F;IP与UDP的关系了吧。 Socket在哪里呢？​ 在图1中，我们没有看到Socket的影子，那么它到底在哪里呢？还是用图来说话，一目了然。如下图2所示： Socket是什么呢？​ Socket是应用层与TCP&#x2F;IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP&#x2F;IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。 你会使用它们吗？​ 前人已经给我们做了好多的事了，网络间的通信也就简单了许多，但毕竟还是有挺多工作要做的。以前听到Socket编程，觉得它是比较高深的编程知识，但是只要弄清Socket编程的工作原理，神秘的面纱也就揭开了。 ​ 例如：一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。 生活中的场景解释了这工作原理，也许TCP&#x2F;IP协议族就是诞生于生活中。 ​ 先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。 ​ 我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页 时，浏览器的进程怎么与web服务器通信的？当你用QQ聊天时，QQ进程怎么与服务器或你好友所在的QQ进程通信？这些都得靠Socket？那什么是 Socket？Socket的类型有哪些？还有Socket的基本函数，这些都是本文想介绍的。本文的主要内容如下： 什么是Socket？​ 上面我们已经知道网络中的进程是通过socket来通信的，那什么是socket呢？socket起源于Unix，而Unix&#x2F;Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write&#x2F;read –&gt; 关闭close”模式来操作。我的理解就是Socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读&#x2F;写IO、打开、关闭）。 网络中进程之间是如何通信的？ 消息传递（管道、FIFO、消息队列） 同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量） 共享内存（匿名的和具名的） 远程过程调用（Sun RPC） ​ 但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程的PID来唯一标识一个进程，但是在网络中这是不可行的。其实TCP&#x2F;IP协议族已经帮我们解决了这个问题，网络层的“IP地址”可以表示这个网络中的主机，而传输层的“协议 + 端口”可以唯一表示主机中的应用程序（进程）。这样利用三元组（IP地址、协议、端口）就可表示网络主机的进程，网络中的进程用就可以利用这个标志与其他进程进行交互。 ​ 使用TCP&#x2F;IP协议的应用程序通常采用应用编程接口：UNIX BSD的套接字（Socket）和UNIX System V的TLI（淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用小恒徐都是采用Socket，而现在又是网络时代，网络中进程通信时无处不在（“一切皆Socket”）。 TCP&#x2F;IP协议概念： ​ TCP&#x2F;IP【TCP（传输控制协议）和IP（网际协议）】提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层OSI模型。 ​ 它们之间好比送信的线路和驿站的作用，比如要建议送信驿站，必须得了解送信的各个细节。 ​ TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的通信协议，数据在传输前要建立连接，传输完毕后还要断开连接，客户端在收发数据前要使用 connect() 函数和服务器建立连接。建立连接的目的是保证IP地址、端口、物理链路等正确无误，为数据的传输开辟通道。 TCP建立连接时要传输三个数据包，俗称三次握手（Three-way Handshaking）。可以形象的比喻为下面的对话： [Shake 1] 套接字A：“你好，套接字B，我这里有数据要传送给你，建立连接吧。”[Shake 2] 套接字B：“好的，我这边已准备就绪。”[Shake 3] 套接字A：“发送连接请求。” TCP数据报结构，如下图1-1所示： 带阴影的几个字段需要重点说明一下： 序号：Seq（Sequence Number）序号占32位，用来标识从计算机A发送到计算机B的数据包的序号，计算机发送数据时对此进行标记。 确认号：Ack（Acknowledge Number）确认号占32位，客户端和服务器端都可以发送，Ack &#x3D; Seq + 1。 标志位：每个标志位占用1Bit，共有6个，分别为 URG、ACK、PSH、RST、SYN、FIN，具体含义如下： URG：紧急指针（urgent pointer）有效。 ACK：确认序号有效。 PSH：接收方应该尽快将这个报文交给应用层。 RST：重置连接。 SYN：建立一个新连接。 FIN：断开一个连接。 连接的建立（三次握手）：使用 connect() 建立连接时，客户端和服务器端会相互发送三个数据包，请看下图1-2： ​ 客户端调用 socket() 函数创建套接字后，因为没有建立连接，所以套接字处于CLOSED状态；服务器端调用 listen() 函数后，套接字进入LISTEN状态，开始监听客户端请求​ 这时客户端发起请求： 当客户端调用 connect() 函数后，TCP协议会组建一个数据包，并设置 SYN 标志位，表示该数据包是用来建立同步连接的。同时生成一个随机数字 1000，填充“序号（Seq）”字段，表示该数据包的序号。完成这些工作，开始向服务器端发送数据包，客户端就进入了SYN-SEND状态。 服务器端收到数据包，检测到已经设置了 SYN 标志位，就知道这是客户端发来的建立连接的“请求包”。服务器端也会组建一个数据包，并设置 SYN 和 ACK 标志位，SYN 表示该数据包用来建立连接，ACK 用来确认收到了刚才客户端发送的数据包 服务器生成一个随机数 2000，填充“序号（Seq）”字段。2000 和客户端数据包没有关系。 服务器将客户端数据包序号（1000）加1，得到1001，并用这个数字填充“确认号（Ack）”字段。 服务器将数据包发出，进入SYN-RECV状态 客户端收到数据包，检测到已经设置了 SYN 和 ACK 标志位，就知道这是服务器发来的“确认包”。客户端会检测“确认号（Ack）”字段，看它的值是否为 1000+1，如果是就说明连接建立成功。 接下来，客户端会继续组建数据包，并设置 ACK 标志位，表示客户端正确接收了服务器发来的“确认包”。同时，将刚才服务器发来的数据包序号（2000）加1，得到 2001，并用这个数字来填充“确认号（Ack）”字段。 客户端将数据包发出，进入ESTABLISED状态，表示连接已经成功建立。 服务器端收到数据包，检测到已经设置了 ACK 标志位，就知道这是客户端发来的“确认包”。服务器会检测“确认号（Ack）”字段，看它的值是否为 2000+1，如果是就说明连接建立成功，服务器进入ESTABLISED状态。 至此，客户端和服务器都进入了ESTABLISED状态，连接建立成功，接下来就可以收发数据了。 TCP四次握手断开连接​ 建立连接非常重要，它是数据正确传输的前提；断开连接同样重要，它让计算机释放不再使用的资源。如果连接不能正常断开，不仅会造成数据传输错误，还会导致套接字不能关闭，持续占用资源，如果并发量高，服务器压力堪忧。 断开连接需要四次握手，可以形象的比喻为下面的对话： [Shake 1] 套接字A：“任务处理完毕，我希望断开连接。”[Shake 2] 套接字B：“哦，是吗？请稍等，我准备一下。”等待片刻后……[Shake 3] 套接字B：“我准备好了，可以断开连接了。”[Shake 4] 套接字A：“好的，谢谢合作。” 下图演示了客户端主动断开连接的场景： ​ 建立连接后，客户端和服务器都处于ESTABLISED状态。这时，客户端发起断开连接的请求： 客户端调用 close() 函数后，向服务器发送 FIN 数据包，进入FIN_WAIT_1状态。FIN 是 Finish 的缩写，表示完成任务需要断开连接。 服务器收到数据包后，检测到设置了 FIN 标志位，知道要断开连接，于是向客户端发送“确认包”，进入CLOSE_WAIT状态。 注意：服务器收到请求后并不是立即断开连接，而是先向客户端发送“确认包”，告诉它我知道了，我需要准备一下才能断开连接。 客户端收到“确认包”后进入FIN_WAIT_2状态，等待服务器准备完毕后再次发送数据包。 等待片刻后，服务器准备完毕，可以断开连接，于是再主动向客户端发送 FIN 包，告诉它我准备好了，断开连接吧。然后进入LAST_ACK状态。 客户端收到服务器的 FIN 包后，再向服务器发送 ACK 包，告诉它你断开连接吧。然后进入TIME_WAIT状态。 服务器收到客户端的 ACK 包后，就断开连接，关闭套接字，进入CLOSED状态。 OSI模型TCP&#x2F;IP对OSI的网络模型层进行了划分如下： TCP&#x2F;IP协议参考模型把所有的TCP&#x2F;IP系列协议归类到四个抽象层中 应用层：TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 等等 传输层：TCP，UDP 网络层：IP，ICMP，OSPF，EIGRP，IGMP 数据链路层：SLIP，CSLIP，PPP，MTU 每一抽象层建立在低一层提供的服务上，并且为高一层提供服务，看起来大概是这样子的 参考文章链接： https://blog.csdn.net/jiushimanya/article/details/82684525 https://www.jianshu.com/p/066d99da7cbd 向博主反馈问题","categories":[{"name":"计算机网络基础","slug":"计算机网络基础","permalink":"http://zqyu.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Socket","slug":"socket","permalink":"http://zqyu.top/tags/socket/"}]},{"title":"JAVA 中的几种基本数据类型","slug":"Java/basics/data_type","date":"2020-06-30T04:49:36.000Z","updated":"2020-06-30T12:06:36.000Z","comments":true,"path":"Java/basics/data_type/","link":"","permalink":"http://zqyu.top/Java/basics/data_type/","excerpt":"JAVA 中的几种基本数据类型是什么，各自占用多少字节。","text":"JAVA 中的几种基本数据类型是什么，各自占用多少字节。 Java共有8中基本数据类型 基本数据类型 占用空间 boolean 1&#x2F;8个字节（1bit） byte 1个字节 short 2个字节 char 2个字节 int 4个字节 float 4个字节 long 8个字节 double 8个字节 其中： bit（位）：位是计算机中存储数据的最小单位，指二进制数中的一个位数，其值为“0”或“1” byte（字节）：字节是计算机存储容量的基本单位，一个字节由8位二进制数组成。在计算机内部，一个字节可以表示一个数据，也可以表示一个英文字母，两个字节可以表示一个汉字 向博主反馈问题","categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"}],"tags":[{"name":"Java数据类型","slug":"java数据类型","permalink":"http://zqyu.top/tags/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]},{"title":"JS setTimeout","slug":"Js/setTimeout","date":"2020-06-27T13:40:10.000Z","updated":"2023-03-23T10:27:02.488Z","comments":true,"path":"Js/setTimeout/","link":"","permalink":"http://zqyu.top/Js/setTimeout/","excerpt":"使用循环时，用来延迟执行方法","text":"使用循环时，用来延迟执行方法 _this.data.imgs.forEach(function(e, index) &#123; // 采用闭包的方式来立即执行setTimeout，每隔500毫秒执行方法 (function(e) &#123; setTimeout(() =&gt; &#123; _this.uploadImg(e); &#125;, index * 1000); &#125;)(e)&#125;); 向博主反馈问题","categories":[{"name":"Js","slug":"js","permalink":"http://zqyu.top/categories/js/"}],"tags":[{"name":"setTimeout","slug":"settimeout","permalink":"http://zqyu.top/tags/settimeout/"}]},{"title":"ArrayList与LinkedList","slug":"Java/List/ArrayList_LinkedList","date":"2020-06-21T01:55:31.000Z","updated":"2020-06-30T12:08:00.000Z","comments":true,"path":"Java/List/ArrayList_LinkedList/","link":"","permalink":"http://zqyu.top/Java/List/ArrayList_LinkedList/","excerpt":"ArrayList与LinkedList主要区别","text":"ArrayList与LinkedList主要区别 ArrayList底层结构是数组 LinkedList底层结构是链表 所以主要区别是数组与链表的区别 ArrayList：基于数组数据结构 查询快，在堆（heap）内存是连续的内存空间支持随机访问 插入和删除的效率比较低，插入需要扩容，删除需要移动元素 根据内容查找元素的效率较低 LinkedList：基于链表数据结构 插入和删除的效率高，非常适合经常增加、删除操作的场景 查询在量大的时候较慢，链表查询，需要从表头或者表尾逐一遍历查询 共同点都不是线程安全的如果想用ArrayList又想线程安全，可以用Vector：底层跟ArrayList一样是数组，但有一点区别，它所有的方法都是被synchronized关键字所修饰，并且扩容大小是2倍 向博主反馈问题","categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"}],"tags":[{"name":"List","slug":"list","permalink":"http://zqyu.top/tags/list/"}]},{"title":"LinkedList","slug":"Java/List/LinkedList","date":"2020-06-09T05:40:26.000Z","updated":"2020-06-30T12:08:16.000Z","comments":true,"path":"Java/List/LinkedList/","link":"","permalink":"http://zqyu.top/Java/List/LinkedList/","excerpt":"LinkedList实现原理","text":"LinkedList实现原理 阅读本篇文章需要数据结构 链表（双向链表） 的基础如何简单使用，创建一个LinkedList对象，并且调用add方法新增一个元素 先来看看不指定插入的位置public static void main(String[] args) &#123; List list = new LinkedList(); list.add(&quot;test&quot;);&#125; 那么就这么两句话，它运行时是如何实现的呢？ 点击进去看源码！ 构造器，并没有执行任何的操作，只是构造一个空链表 /*** Constructs an empty list.*/public LinkedList() &#123;&#125; add方法，看到方法称以及注释，可知道新增节点采用的是尾插法。 /*** Appends the specified element to the end of this list.** &lt;p&gt;This method is equivalent to &#123;@link #addLast&#125;.** @param e element to be appended to this list* @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)*/public boolean add(E e) &#123; linkLast(e); return true;&#125; 再看具体任何新增节点的细节，进去看看linkLast方法 这是一个很标准的尾插法操作：先将尾节点的引用赋值给 l ，然后创建一个新节点，该节点的前驱（prev）为 l ，数据（item）为 e ，后继（next）为null 接下来判断该新增节点是否为链表的第一个节点，如果是，则将该节点的引用赋值给 first ，否则将新增节点地址赋值给l.next private static class Node&lt;E&gt; &#123; E item; Node&lt;E&gt; next; Node&lt;E&gt; prev; Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123; this.item = element; this.next = next; this.prev = prev; &#125;&#125;/*** Links e as last element.*/void linkLast(E e) &#123; final Node&lt;E&gt; l = last; final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); last = newNode; if (l == null) first = newNode; else l.next = newNode; size++; modCount++;&#125; 再看看指定插入的位置public static void main(String[] args) &#123; List list = new LinkedList(); list.add(1, &quot;test&quot;);&#125; 具体方法实现 /*** Inserts the specified element at the specified position in this list.* Shifts the element currently at that position (if any) and any* subsequent elements to the right (adds one to their indices).** @param index index at which the specified element is to be inserted* @param element element to be inserted* @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;*/public void add(int index, E element) &#123; checkPositionIndex(index); if (index == size) linkLast(element); else linkBefore(element, node(index));&#125; 首先执行checkPositionIndex，校验index是否合法，具体实现 private void checkPositionIndex(int index) &#123; if (!isPositionIndex(index)) throw new IndexOutOfBoundsException(outOfBoundsMsg(index));&#125;/*** Tells if the argument is the index of a valid position for an* iterator or an add operation.*/private boolean isPositionIndex(int index) &#123; return index &gt;= 0 &amp;&amp; index &lt;= size;&#125; 然后回判断插入的位置是否为尾节点，如果是则执行上面所说的尾插法，否则执行linkBefore方法，需要参数（E e, Node succ），而所需要的 succ 形参需要调用node方法获取到。 看node方法，根据index（索引）获取到所对应的节点。判断的方法类似二分查找法，链表查找都需要逐一遍历，所以需要判断从头节点还是尾节点开始遍历查找。 public void add(int index, E element) &#123; checkPositionIndex(index); if (index == size) linkLast(element); else linkBefore(element, node(index));&#125;/*** Inserts element e before non-null Node succ.*/void linkBefore(E e, Node&lt;E&gt; succ) &#123; // assert succ != null; final Node&lt;E&gt; pred = succ.prev; final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ); succ.prev = newNode; if (pred == null) first = newNode; else pred.next = newNode; size++; modCount++;&#125;/*** Returns the (non-null) Node at the specified element index.*/Node&lt;E&gt; node(int index) &#123; // assert isElementIndex(index); if (index &lt; (size &gt;&gt; 1)) &#123; Node&lt;E&gt; x = first; for (int i = 0; i &lt; index; i++) x = x.next; return x; &#125; else &#123; Node&lt;E&gt; x = last; for (int i = size - 1; i &gt; index; i--) x = x.prev; return x; &#125;&#125; 接下来看linkBefore方法，这个也是双向链表基本的操作。 /*** Inserts element e before non-null Node succ.*/void linkBefore(E e, Node&lt;E&gt; succ) &#123; // assert succ != null; final Node&lt;E&gt; pred = succ.prev; final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ); succ.prev = newNode; if (pred == null) first = newNode; else pred.next = newNode; size++; modCount++;&#125; 向博主反馈问题","categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"}],"tags":[{"name":"List","slug":"list","permalink":"http://zqyu.top/tags/list/"}]},{"title":"ArrayList","slug":"Java/List/ArrayList","date":"2020-06-08T13:46:57.000Z","updated":"2020-06-30T12:07:48.000Z","comments":true,"path":"Java/List/ArrayList/","link":"","permalink":"http://zqyu.top/Java/List/ArrayList/","excerpt":"ArrayList实现原理","text":"ArrayList实现原理 如何简单使用，创建一个ArrayList对象，并且调用add方法新增一个元素public static void main(String[] args) &#123; List list = new ArrayList(); list.add(&quot;test&quot;);&#125; 那么就这么两句话，它运行时是如何实现的呢？ 点击进去看源码！ 当不指定数组长度时 构造器（构造函数）：此构造器没有参数，并且也没有数组初始化，就只有一句 this.elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA 。问题来了，是什么时候开始初始化数组？初始化的长度是多少？带着这个问题，继续往下面看。 /** * Constructs an empty list with an initial capacity of ten. */public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125; 当调用add方法时，点击进去查看源代码，在真正赋值的操作前，执行了ensureCapacityInternal，参数是 size + 1 ，size表示当前ArrayList的大小，此参数的意义是判断 size + 1 后，数组索引是否越界，所以这个方法是保证在赋值前数组索引是否越界（是否需要扩容）以及记录ArrayList结构性变化的次数： /*** The size of the ArrayList (the number of elements it contains).** @serial*/private int size;/*** Appends the specified element to the end of this list.** @param e element to be appended to this list* @return &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;@link Collection#add&#125;)*/public boolean add(E e) &#123; // 在赋值前，记录modCount（modCount，记录ArrayList结构性变化的次数）以及判断是否需要扩容 ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true;&#125; 点进去ensureCapacityInternal方法，上来就一个判断，这个判断是什么意思？回过头来看一下空构造器，这句话不就是判断的条件吗？ 构造器出现的 this.elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA;那么它是什么意思呢？按照字面意思是表示一种状态，当 elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA 时，代表采用默认的长度 DEFAULT_CAPACITY （10），以确保在第一次添加元素时要扩容的大小。 判断条件成立，执行Math.max，在DEFAULT_CAPACITY（10）和minCapacity（1）之间取最大值，以确保在第一次添加元素时要扩容的大小，获取到最大值后将它赋值给minCapacity（10），接着执行ensureExplicitCapacity方法并传入参数minCapacity，具体往后面看。 /*** Default initial capacity.*/private static final int DEFAULT_CAPACITY = 10;/*** Shared empty array instance used for default sized empty instances. We* distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when* first element is added.*/private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;/*** The array buffer into which the elements of the ArrayList are stored.* The capacity of the ArrayList is the length of this array buffer. Any* empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA* will be expanded to DEFAULT_CAPACITY when the first element is added.*/transient Object[] elementData; // non-private to simplify nested class accessprivate void ensureCapacityInternal(int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); &#125; ensureExplicitCapacity(minCapacity);&#125; 继续来看看ensureExplicitCapacity方法源码，上来就modCount++，表示ArrayList结构性变化的次数加一，接着判断数组索引是否越界（是否需要扩容）。此时，当创建ArrayList对象时，只是初始化空数组，并没有指定数组长度，所以elementData.length &#x3D; 0，而minCapacity是传过来的参数10，所以该判断条件是成立的，需要执行grow方法进行扩容。 private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125; 这里需要注意的是：minCapacity &#x3D; 10，elementData.length &#x3D; 0。这里不理解的还需要再回到前面去看看。 当执行到扩容语句时，此时的elementData.length &#x3D; 0，所以扩容之后还是0，这个时候就有疑问了，扩容之后还是0？接下来的一个判断起到关键性的作用，也是专门判断扩容之后的长度比原来小的问题，当扩容后的长度比原先的小时，最终是按照原先的大小进行扩容，再下面就是数组copy扩容了。 /*** Increases the capacity to ensure that it can hold at least the* number of elements specified by the minimum capacity argument.** @param minCapacity the desired minimum capacity*/private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; // 这里确定扩容的大小，比原来大1.5倍 int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125; 刚开始写的博客，可能表达的有点不清楚，请见谅 总结：在不指定数组长度的前提下，创建ArrayList对象时，并不会随着ArrayList对象的创建而马上初始化数组，而是先赋值一个空数组，当add第一个元素时，才会进行初始化数组，并且默认数组的长度为10，扩容容量为1.5倍。 当指定数组长度：ArrayList list = new ArrayList(8);list.add(&quot;test&quot;); 结论：这个时候会执行的构造器，与不指定长度的构造器有明显的区别，当指定长度，创建ArrayList对象时，会随着ArrayList对象的创建而初始化数组，而默认长度的构造器是在第一次add元素时才初始化数组，并且长度时10. /*** Constructs an empty list with the specified initial capacity.** @param initialCapacity the initial capacity of the list* @throws IllegalArgumentException if the specified initial capacity* is negative*/public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+ initialCapacity); &#125;&#125; 向博主反馈问题","categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"}],"tags":[{"name":"List","slug":"list","permalink":"http://zqyu.top/tags/list/"}]},{"title":"StringBuffer与StringBuilder","slug":"Java/String/StringBuffer_StringBuilder","date":"2020-06-07T04:41:39.000Z","updated":"2020-06-30T12:08:24.000Z","comments":true,"path":"Java/String/StringBuffer_StringBuilder/","link":"","permalink":"http://zqyu.top/Java/String/StringBuffer_StringBuilder/","excerpt":"StringBuffer与StringBuilder主要的区别","text":"StringBuffer与StringBuilder主要的区别 话不多说，先先看源码（JDK1.8）StringBuffer类的append方法： @Overridepublic synchronized StringBuffer append(String str) &#123; toStringCache = null; super.append(str); return this;&#125; StringBuilder类的append方法： @Overridepublic StringBuilder append(String str) &#123; super.append(str); return this;&#125; 明显可以看出，StringBuffer类的append方法被synchronized关键字修饰，而StringBuilder类的append方法没有被synchronized修饰。 Tips：被synchronized修改的方法或者代码块可以保证在同一时刻，只有一个线程可以执行，同时还可以保证线程的可见性。 结论：StringBuffer时线程安全的（所有方法都加上了synchronized关键字），StringBuilder时线程不安全的，但是StringBuilder的效率远比StringBuffer快。String是字符串不可变对象, StringBuffer、StringBuild,可变对象 StringBuffer线程安全,其中方法用synchronized修饰除了synchronized关键字外，StringBuffer类还多了个toStringCache成员变量，这个变量是干什么的呢？来看一下源码 /*** A cache of the last value returned by toString. Cleared* whenever the StringBuffer is modified.*/private transient char[] toStringCache;@Overridepublic synchronized StringBuffer append(String str) &#123; toStringCache = null; super.append(str); return this;&#125; 从官方字面意思来说是返回最后一次toString的缓存值，一但被修改就清除这个值。 当多个线程同时访问时，StringBuffer虽然是线程安全的，但是性能低效，所以加一个缓存来平衡一下StringBuffer的性能。 向博主反馈问题","categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"}],"tags":[{"name":"String","slug":"string","permalink":"http://zqyu.top/tags/string/"}]},{"title":"MarkDown语法","slug":"MarkDown/MarkDown","date":"2020-06-06T12:32:41.000Z","updated":"2020-06-30T12:07:10.000Z","comments":true,"path":"MarkDown/MarkDown/","link":"","permalink":"http://zqyu.top/MarkDown/MarkDown/","excerpt":"MarkDown语法基本语法","text":"MarkDown语法基本语法 标题:#空格：一级标题##空格：二级标题###空格：三级标题####空格：四级标题#####空格：五级标题######空格：六级标题 字体两边各加两个 * 是粗体 两边各加一个 * 是斜体 两边各加三个 * 是粗体加斜体 两边各加两个 ~ 波浪线 引用&quot;&gt;&quot; 空格 例如： 分割线三个&quot;---&quot;或者&quot;***&quot;是分割线 图片!加[]加()是添加图片,可以添加本地路径或网络图片地址 超链接[]加()括号里面下网络地址 列表 1点空格（1. ）：是以下列表 A B C -空格：是以下列表 A B C 表格例如：下面三行，删掉换行就是表格 名字|性别|生日 --|--|--| 张三|男|1994.1.1 名字 性别 生日 张三 男 1994.1.1 联系博主","categories":[{"name":"MarkDown","slug":"markdown","permalink":"http://zqyu.top/categories/markdown/"}],"tags":[{"name":"MarkDown","slug":"markdown","permalink":"http://zqyu.top/tags/markdown/"}]},{"title":"http与https的区别","slug":"计算机网络基础/http与https的","date":"2020-06-06T02:54:59.000Z","updated":"2020-06-30T12:04:34.000Z","comments":true,"path":"计算机网络基础/http与https的/","link":"","permalink":"http://zqyu.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/http%E4%B8%8Ehttps%E7%9A%84/","excerpt":"基本概念和主要区别","text":"基本概念和主要区别 HTTP与HTTPS的基本概念 HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。 HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。 HTTP与HTTPS有什么区别？ HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。 https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。 http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。 http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。 http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。 参考文章：https://www.jianshu.com/p/6db0c6dc97a9联系博主","categories":[{"name":"计算机网络基础","slug":"计算机网络基础","permalink":"http://zqyu.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"http https","slug":"http-https","permalink":"http://zqyu.top/tags/http-https/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2020-06-05T15:37:08.000Z","updated":"2020-06-06T10:21:14.000Z","comments":true,"path":"我的第一篇博客/","link":"","permalink":"http://zqyu.top/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"2020&#x2F;6&#x2F;4 搭建hexo博客","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-06-04T15:37:08.000Z","updated":"2020-06-06T10:20:52.000Z","comments":true,"path":"hello-world/","link":"","permalink":"http://zqyu.top/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Java","slug":"java","permalink":"http://zqyu.top/categories/java/"},{"name":"MySql","slug":"mysql","permalink":"http://zqyu.top/categories/mysql/"},{"name":"面试","slug":"面试","permalink":"http://zqyu.top/categories/%E9%9D%A2%E8%AF%95/"},{"name":"SpringMVC","slug":"springmvc","permalink":"http://zqyu.top/categories/springmvc/"},{"name":"idea","slug":"idea","permalink":"http://zqyu.top/categories/idea/"},{"name":"Spring","slug":"spring","permalink":"http://zqyu.top/categories/spring/"},{"name":"计算机网络基础","slug":"计算机网络基础","permalink":"http://zqyu.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"},{"name":"Js","slug":"js","permalink":"http://zqyu.top/categories/js/"},{"name":"MarkDown","slug":"markdown","permalink":"http://zqyu.top/categories/markdown/"}],"tags":[{"name":"Map","slug":"map","permalink":"http://zqyu.top/tags/map/"},{"name":"MySql","slug":"mysql","permalink":"http://zqyu.top/tags/mysql/"},{"name":"Adapter","slug":"adapter","permalink":"http://zqyu.top/tags/adapter/"},{"name":"idea","slug":"idea","permalink":"http://zqyu.top/tags/idea/"},{"name":"aop","slug":"aop","permalink":"http://zqyu.top/tags/aop/"},{"name":"class","slug":"class","permalink":"http://zqyu.top/tags/class/"},{"name":"Socket","slug":"socket","permalink":"http://zqyu.top/tags/socket/"},{"name":"Java数据类型","slug":"java数据类型","permalink":"http://zqyu.top/tags/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"name":"setTimeout","slug":"settimeout","permalink":"http://zqyu.top/tags/settimeout/"},{"name":"List","slug":"list","permalink":"http://zqyu.top/tags/list/"},{"name":"String","slug":"string","permalink":"http://zqyu.top/tags/string/"},{"name":"MarkDown","slug":"markdown","permalink":"http://zqyu.top/tags/markdown/"},{"name":"http https","slug":"http-https","permalink":"http://zqyu.top/tags/http-https/"}]}